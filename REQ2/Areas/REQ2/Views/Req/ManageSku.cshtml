@model DcmsMobile.REQ2.ViewModels.ManageSkuViewModel
@*
Add SKU usage scenarios:
1. How easy it is to enter 20 random SKUs
2. Entering every size of 10 given style/color/dim
*@
@{
    ViewBag.Title = "Manage SKU";
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}
@section scripts {
    <script src="@Links_REQ2.Areas.REQ2.Scripts.ManageSku_all_js" type="text/javascript"></script>
    <link href="@Links_REQ2.Areas.REQ2.Content.ManageSku_min_css" rel="stylesheet" />
}
@section sidebar {
    <div class="box boxA">
        <div class="boxContent">
            <div>
                <span style="display: inline-block" class="ui-icon ui-state-active ui-icon-arrowreturnthick-1-w"></span>@Html.ActionLink("Back to Recent Requests", MVC_REQ2.REQ2.Req.DisplayRecentRequest())<br />
                <span style="display: inline-block" class="ui-icon ui-state-active ui-icon-folder-open"></span>
                @Html.ActionLink(string.Format("Carton List for Request #{0}", Model.CurrentRequest.ResvId), MVC_REQ2.REQ2.Req.DisplayCartonList(Model.CurrentRequest.ResvId))<br />

                <span style="display: inline-block" class="ui-icon ui-state-active ui-icon-pencil"></span>

                @Html.ActionLink(string.Format("Edit Request #{0}", Model.CurrentRequest.ResvId), MVC_REQ2.REQ2.Req.EditRequest(Model.CurrentRequest.ResvId))
            </div>
        </div>
    </div>
    <div class="box boxB">
        <div class="boxContent">
            <span style="display: inline-block" class="ui-icon ui-state-active ui-icon-arrowreturnthick-1-w"></span><a href="@string.Format("{0}?CARTON_STORAGE_AREA={1}&vwh_id={2}", Model.CartonDetailsForStoragAreaUrl, Model.CurrentRequest.SourceAreaId, Model.CurrentRequest.VirtualWareHouseId)" title="You can check the availability of cartons for the SKUs you have requested by clicking here." target="_blank">Report 40.16</a> : @string.Format("Check carton availability in {0}", Model.CurrentRequest.SourceAreaShortName)<br />
            <span style="display: inline-block" class="ui-icon ui-state-active ui-icon-arrowreturnthick-1-w"></span><a href="@string.Format("{0}?destination_area={1}&inventory_storage_area={2}&vwh_id={3}&warehouse_location_id={4}", Model.SkuToBePulledUrl, Model.CurrentRequest.DestinationAreaId, Model.CurrentRequest.SourceAreaId, Model.CurrentRequest.VirtualWareHouseId, Model.CurrentRequest.BuildingId)" title="This will shows the SKUs which are already requested for @Model.CurrentRequest.DestinationAreaShortName" target="_blank">Report 30.06</a> : @string.Format("SKUs to be pulled in {0}", Model.CurrentRequest.DestinationAreaShortName)
        </div>
    </div>
    <div class="box boxA">
        <div class="boxContent">
            <span style="display: inline-block" class="ui-icon ui-state-active ui-icon-arrowreturnthick-1-w"></span>
            @Html.ActionLink(string.Format("Create Like"), MVC_REQ2.REQ2.Req.CreateRequest(Model.CurrentRequest.ResvId))
            Create a new request keeping all other attributes same except SKUs of this request. <span class="ui-icon ui-icon-info" style="display: inline-block"
                title="A new request is created which copies the current request except the SKUs. It can be useful when you want to create multiple requests with different SKUs but keeping all other parameters same."></span>
        </div>
    </div>
}
<fieldset style="line-height: 1.5em">
    <legend><span style="font-size: 1.4em">Request #@Html.DisplayFor(m => m.CurrentRequest.ResvId)</span> @Html.ActionLink("Edit", MVC_REQ2.REQ2.Req.EditRequest(Model.CurrentRequest.ResvId))</legend>
    <div style="padding-left: 1em">
        <dl>
            <dt>Pull What?</dt>
            <dd style="margin-left: 2em">Cartons of <em>Virtual Warehouse</em> <strong style="font-size: 1.2em">@Html.DisplayFor(m => m.CurrentRequest.VirtualWareHouseId)</strong>
                @Html.LabelFor(m => m.CurrentRequest.CartonFiltersDisplayString): @Html.DisplayFor(m => m.CurrentRequest.CartonFiltersDisplayString)

            </dd>
            <dt>Pull Why?</dt>
            <dd style="margin-left: 2em">Priority @Html.DisplayFor(m => m.CurrentRequest.Priority).
                    @Html.DisplayFor(m => m.CurrentRequest.Remarks).
                @if (Model.CurrentRequest.IsConversionRequest)
                { 
                    <div>
                        @if (!string.IsNullOrWhiteSpace(Model.CurrentRequest.TargetVwhId))
                        {
                            <span>Change Virtual Warehouse to <strong style="font-size: 1.2em">@Html.DisplayFor(m => m.CurrentRequest.TargetVwhId)</strong>.</span>
                        }
                    </div>
                }
            </dd>
            <dt>Pull Where?</dt>
            <dd style="margin-left: 2em">From 
    <strong style="font-size: 1.4em"><em>@Html.DisplayFor(m => m.CurrentRequest.BuildingId)</em> @Html.DisplayFor(m => m.CurrentRequest.SourceAreaShortName) &rarr; @Html.DisplayFor(m => m.CurrentRequest.DestinationAreaShortName)</strong>.
            </dd>
        </dl>
        @if (Model.CurrentRequest.AssignDate == null)
        {
            <strong>
                Cartons have not yet been assigned
            </strong>
        }
        else
        {
            <div>
                <em>@Html.DisplayFor(m => m.CurrentRequest.AssignedCartonCount)</em> cartons have been assigned to this request on <em>@Html.DisplayFor(m => m.CurrentRequest.AssignDate)</em>
            </div>
        }
    </div>
</fieldset>
@if (Model.CurrentRequest.IsConversionRequest)
{ 
    <p>
        Rework is needed.
    Inventory will be immediately hidden from Vision (Target Quality): @Model.CurrentRequest.TargetQualityCode
    </p>
}
<div>
    <div class="boxContent">
        @using (Html.BeginForm(MVC_REQ2.REQ2.Req.AssignCartons(), FormMethod.Post, new
            {
                style = "display:inline"
            }))
        {
            <button id="btnAssign" type="submit">
                Assign Cartons</button>
            <input type="hidden"  name="@MVC_REQ2.REQ2.Req.AssignCartonsParams.ctnresvId" value="@Model.CurrentRequest.ResvId" />
            @Html.HiddenFor(m => m.CurrentRequest.IsConversionRequest)
        }
        @using (Html.BeginForm(MVC_REQ2.REQ2.Req.UnAssignCartons(), FormMethod.Post, new
        {
            style = "display:inline"
        }))
        {
            <input type="hidden" name="@MVC_REQ2.REQ2.Req.UnAssignCartonsParams.ctnresvId" value="@Model.CurrentRequest.ResvId" />
            <button id="btnUnAssign" type="submit">Unassign Cartons</button>
        }
    </div>
    <div>
        <div id="divSkuList">
            @Html.Partial(MVC_REQ2.REQ2.Req.Views._manageSkuListPartial, Model)
        </div>
    </div>
</div>
@*$Id$*@
