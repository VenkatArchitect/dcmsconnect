@model DcmsMobile.REQ2.ViewModels.ManageSkuViewModel
@using (Html.BeginForm(MVC_REQ2.REQ2.Req.Actions.AddSku(), FormMethod.Post))
{
    @Html.HiddenFor(m => m.CurrentRequest.ResvId, new { id = "resvId" })
    @Html.HiddenFor(m => m.CurrentRequest.TargetVwhId)
    @Html.HiddenFor(m => m.CurrentRequest.IsConversionRequest)
    @Html.StatusSummary()
    @Html.ValidationSummary(true)
    <div id="addSkuTip" class="ui-helper-hidden">

        <div style="font-size: 10pt">
            <strong>To Add SKU</strong> <em>Style</em>&lt;TAB&gt;<em>Color</em>&lt;TAB&gt;<em>Dimension</em>&lt;TAB&gt;<em>Size</em>&lt;TAB&gt;<em>Pieces</em>&lt;Enter&gt;
        </div>
        @if (Model.CurrentRequest.IsConversionRequest)
        { 
            <div style="font-size: 9pt">
                Target SKU example <em>00011-40737</em>&lt;TAB&gt;<em>WH-WHH</em>&lt;TAB&gt;<em>.</em>&lt;TAB&gt;<em>32</em>&lt;TAB&gt;<em>Pieces</em>&lt;Enter&gt;
            </div>
        }

    </div>
    <table>
        <caption>SKU List</caption>
        <thead>
            <tr>
                <th rowspan="2">#
                </th>
                <th colspan="5">Source SKU</th>

                <th colspan="2">Assigned
                </th>
                <th rowspan="2">Action
                </th>
            </tr>
            <tr id="trAddSku">
                <th style="white-space: nowrap">Style
                    <br />

                    @Html.TextBoxFor(m => m.NewStyle, new
                                {
                                    id = "tbNewStyle",
                                    style = "text-transform: uppercase",
                                    size = 15,
                                    maxlength = 15,
                                    data_source_attr = "data-style-editable"
                                })
                    @Html.ValidationMessageFor(m => m.NewStyle, null, new
               {
                   style = "display:block"
               })
                </th>
                <th>Color<br />
                    @Html.TextBoxFor(m => m.NewColor, new
                                {
                                    style = "text-transform: uppercase",
                                    size = 6,
                                    maxlength = 10,
                                    data_source_attr = "data-color-editable",
                                })
                    @Html.ValidationMessageFor(m => m.NewColor, null, new
               {
                   style = "display:block"
               })
                </th>
                <th>Dimension<br />
                    @Html.TextBoxFor(m => m.NewDimension, new
                                {
                                    style = "text-transform: uppercase",
                                    size = 6,
                                    maxlength = 10,
                                    data_source_attr = "data-dimension-editable"
                                })
                    @Html.ValidationMessageFor(m => m.NewDimension, null, new
               {
                   style = "display:block"
               })
                </th>
                <th>Size<br />
                    @Html.TextBoxFor(m => m.NewSkuSize, new
                                {
                                    style = "text-transform: uppercase",
                                    size = 6,
                                    maxlength = 10,
                                    data_source_attr = "data-skusize-editable"
                                })
                    @Html.ValidationMessageFor(m => m.NewSkuSize, null, new
               {
                   style = "display:block"
               })
                </th>
                <th>Pieces
                    <br />
                    @Html.TextBoxFor(m => m.NewPieces, new
                        {
                            maxlength = 8,
                            size = 4,
                            id = "tbPieces",
                            data_source_attr = "data-pieces-editable"
                        })
                    <span id="btnAddSku" class="ui-icon ui-icon-plus" style="display: inline-block; cursor: pointer" tabindex="0"
                        title="Click or press ENTER to add an SKU to the request"></span>
                    @Html.ValidationMessageFor(m => m.NewPieces, null, new
               {
                   style = "display:block"
               })
                </th>
                <th>Pieces</th>
                <th>Cartons

                </th>
            </tr>
        </thead>
        <tfoot>
            <tr class="ui-state-active">
                <td colspan="5">Total
                </td>
                <td style="text-align: right">@Html.DisplayFor(m => m.DisplayTotalPieces)</td>
                <td style="text-align: right">@Html.DisplayFor(m => m.DisplayTotalAssignedPieces)</td>
                <td style="text-align: center">
                    @Html.DisplayFor(m => m.TotalPulledCartons) of @Html.DisplayFor(m => m.TotalCartons) pulled
                </td>
                <td></td>
            </tr>
        </tfoot>
        <tbody>
            @for (var i = 0; i < Model.RequestedSkus.Count; i++)
            {
                <tr class="@(i % 2 == 0 ? "rowA" : "rowB") @(Model.RequestedSkus[i].SourceSku.SkuId == Model.SkuIdLastAdded ? "ui-state-highlight" : "")"  data-pieces-editable ="@Model.RequestedSkus[i].Pieces"
                    title="Select to edit this SKU" data-style-editable="@Model.RequestedSkus[i].StyleEditable" data-color-editable="@Model.RequestedSkus[i].ColorEditable" data-dimension-editable ="@Model.RequestedSkus[i].DimensionEditable" 
                    data-skusize-editable ="@Model.RequestedSkus[i].SkuSizeEditable">
                    <td>
                        @(i + 1)
                    </td>
                    <td>
                        @Html.DisplayFor(m => m.RequestedSkus[i].StyleDisplay)
                    </td>
                    <td>@Html.DisplayFor(m => m.RequestedSkus[i].ColorDisplay)
                    </td>
                    <td>@Html.DisplayFor(m => m.RequestedSkus[i].DimensionDisplay)
                    </td>
                    <td>@Html.DisplayFor(m => m.RequestedSkus[i].SkuSizeDisplay)
                    </td>
                    <td style="text-align: right;">
                        @Html.DisplayFor(m => m.RequestedSkus[i].Pieces)
                    </td>
                    <td style="text-align: right">@Html.DisplayFor(m => m.RequestedSkus[i].AssignedPieces)</td>
                    <td style="text-align: right">
                        @if (Model.RequestedSkus[i].TotalCartons.HasValue)
                        {
                            if (Model.RequestedSkus[i].PulledCartons.HasValue)
                            { 
                            <span>
                                @Html.DisplayFor(m => m.RequestedSkus[i].PulledCartons) of @Html.DisplayFor(m => m.RequestedSkus[i].TotalCartons) pulled
                            </span>
                            }
                            else
                            { 
                            @Html.DisplayFor(m => m.RequestedSkus[i].UnPulledCartons)
                            }
                        }
                    </td>
                    <td style="text-align: center">
                        <span data-pulled-cartons="@Model.RequestedSkus[i].PulledCartons" style="display: inline-block; cursor: pointer;" class="ui-icon ui-icon-close"
                             data-href="@Url.Action(MVC_REQ2.REQ2.Req.DeleteSku(Model.RequestedSkus[i].SourceSku.SkuId, Model.CurrentRequest.ResvId))"></span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
}
@*$Id$*@
