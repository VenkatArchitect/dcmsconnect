@model DcmsMobile.REQ2.Areas.REQ2.Home.PropertyEditorViewModel
@{
    Layout = MVC_REQ2.REQ2.SharedViews.Views._layoutReq2;
    ViewBag.Title = string.IsNullOrEmpty(Model.ResvId) ? "Create New Request" : string.Format("Edit Request #{0}", Model.ResvId);
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}

@section script {
    <script type="text/javascript" src="@Links_REQ2.Areas.REQ2.Home.PropertyEditor_js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            var $ddlTargetQualityCode = $('#ddlTargetQualityCode');
            var $cbUpdateQuality = $('#cbUpdateQuality');
            var $CbConversionRequest = $('#CbConversionRequest');
            var $ddlTargetVwh = $('#ddlTargetVwh');

            $('#divAccordion').accordion();
            if ($('#resvId').val() != '') {
                if ($ddlTargetQualityCode.val() != '') {
                    $cbUpdateQuality.attr('checked', 'checked');
                } else {
                    $ddlTargetQualityCode.val('').attr('disabled', 'disabled');
                }
                $CbConversionRequest.attr('disabled', 'disabled');
                if ($CbConversionRequest.attr('checked')) {
                    $ddlTargetVwh.removeAttr('disabled');
                } else {
                    $ddlTargetVwh.attr('disabled', 'disabled');
                }
            }
            else {
                $CbConversionRequest.removeAttr('disabled');
                $ddlTargetVwh.attr('disabled', 'disabled');
                $ddlTargetQualityCode.val('').attr('disabled', 'disabled');
            }

            $CbConversionRequest.change(function (e) {
                if ($CbConversionRequest.is(':checked')) {
                    $ddlTargetVwh.removeAttr('disabled');
                }
                else {
                    $ddlTargetVwh.val('').attr('disabled', 'disabled');
                }
            });

            $cbUpdateQuality.change(function (e) {
                if ($cbUpdateQuality.is(':checked')) {
                    $ddlTargetQualityCode.removeAttr('disabled');
                }
                else {
                    $ddlTargetQualityCode.val('').attr('disabled', 'disabled');
                }
            });

            $('#btnCreateRequest').button({ icons: { primary: 'ui-icon-document' } });
            $('#btnSaveRequest').button({ icons: { primary: 'ui-icon-disk' } });
            $('#btnGo').button({ icons: { secondary: 'ui-icon-search' } }).click(function (e) {
                if ($('#frmSearch input:text').val() == '') {
                    $('#frmSearch div').html("Please enter the valid Request ID")
                        .removeClass('validation-summary-valid')
                        .addClass('validation-summary-errors');
                    return false;
                }
            });
        });
    </script>
}
@*@section sidebar{
        <div class="box boxA">
            <div class="boxContent">
                @Html.Partial(MVC_REQ2.REQ2.Home.Views._existingRequestPartial, Model)
            </div>
        </div>
        <div class="box boxB">
            <div class="boxContent">
                <span style="display: inline-block" class="ui-icon ui-state-active ui-icon-folder-open">
                </span>@Html.ActionLink("Recent Requests", MVC_REQ2.REQ2.Home.Index())
            </div>
        </div>
    }*@

<div class="container">
    <h2 style="margin-top:0">
        Request Editor
    </h2>


    @using (Html.BeginForm(MVC_REQ2.REQ2.Home.UpdateRequest(), FormMethod.Post, new
{
    @class = "form-horizontal",
    role = "form"
}))
    {

   
        @Html.HiddenFor(m => m.ResvId, new { id = "resvId" })


        <div class="form-group">
            <label for="CbConversionRequest" class="col-sm-2 control-label">Perform conversion</label>
            <div class="col-sm-5">

                @Html.CheckBoxFor(m => m.RequestForConversion, new
           {
               id = "CbConversionRequest",
               @class = "form-control"
           })

                <p class="help-block hidden-xs">A block of help text that breaks onto a new line and may extend beyond one line.</p>
            </div>

            <div class="col-sm-5">

                Priority
                <label class="radio-inline">
                    <input type="radio" name="inlineRadioOptions" id="inlineRadio1" value="option1"> High
                </label>
                <label class="radio-inline">
                    <input type="radio" name="inlineRadioOptions" id="inlineRadio2" value="option2"> Medium
                </label>
                <label class="radio-inline">
                    <input type="radio" name="inlineRadioOptions" id="inlineRadio3" value="option3"> Low
                </label>
            </div>
        </div>

        <div class="form-group">
            <label for="ddlVwh" class="col-sm-2 control-label">Vwh</label>
            <div class="col-sm-5">
                @Html.DropDownListFor(m => m.VirtualWareHouseId, Model.VirtualWareHouseList, Model.VirtualWareHouseList.Count() > 1 ? "(Please Select)" : null, new
           {
               id = "ddlVwh",
               @class = "form-control"
           })

                <p class="help-block hidden-xs">A block of help text that breaks onto a new line and may extend beyond one line.</p>
            </div>
            <div class="col-sm-5 conversion-only">
                <div class="input-group">
                    <span class="input-group-addon">Convert To</span>

                    @Html.DropDownListFor(m => m.TargetVwhId, Model.TargetVwhList, Model.TargetVwhList.Count() > 1 ? "(Please Select)" : null, new
           {
               id = "ddlVwh",
               @class = "form-control"
           })
                </div>
                <p class="help-block">The Virtual Warehouse to which all pulled SKUs should be converted to</p>
            </div>
        </div>

        <div class="form-group">
            <label for="ddlArea" class="col-sm-2 control-label">Pull from area</label>
            <div class="col-sm-5">

                @Html.DropDownListFor(m => m.SourceAreaId, Model.SourceAreas, Model.SourceAreas.Count() > 1 ? "(Please Select)" : null, new
           {
               id = "ddlArea",
               @class = "form-control"
           })
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m.OverPullCarton, new { }) Allow Overpulling
                    </label>
                </div>


                <p class="help-block">A block of help text that breaks onto a new line and may extend beyond one line.</p>
            </div>
            <div class="col-sm-5 conversion-only">
                @Html.DropDownListFor(m => m.DestinationAreaId, Model.DestinationAreas, Model.DestinationAreas.Count() > 1 ? "(Please Select)" : null, new
           {
               id = "ddlArea",
               @class = "form-control"
           })
                <p class="help-block">Destination area</p>
            </div>
        </div>

        <div class="form-group">
            <label for="inputEmail3" class="col-sm-2 control-label">Pull SKUs of Quality</label>
            <div class="col-sm-5">
                <input type="text" class="form-control" id="inputEmail3" placeholder="TODO: Dropdown for source quality">
            </div>
            <div class="col-sm-5">
                <div class="input-group">
                    <span class="input-group-addon">
                        @Html.CheckBoxFor(m => m.UpdateQualityFlag, new { })
                    </span>
                    @Html.DropDownListFor(m => m.TargetQualityCode, Model.TargetQualityCodeList, "(No Change)", new { @class = "form-control" })

                </div><!-- /input-group -->
                <p class="help-block">Select a quality above if you would like to change the quality of the cartons before they are pulled.</p>
            </div>
        </div>

        <div class="form-group">
            <label for="inputEmail3" class="col-sm-2 control-label">Remarks</label>
            <div class="col-sm-10">
                @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control" })

            </div>
        </div>

        <div>
            @if (string.IsNullOrEmpty(Model.ResvId))
            {
                <button type="submit" class="btn btn-default" id="btnCreateRequest">
                    Create Request
                </button>
            }
            else
            {
                <button type="submit" class="btn btn-default" id="btnSaveRequest">
                    Save Request
                </button>
                @Html.ActionLink("Continue without saving", MVC_REQ2.REQ2.Home.SkuEditor(Model.ResvId))
            }
            @Html.ValidationSummary()

        </div>

    
    }

</div>

@*$Id$*@
