@model DcmsMobile.Receiving.ViewModels.Home.ReceivingProcessModel
@{
    Layout = MVC_Receiving.Receiving.Shared.Views._layoutReceiving;   // "~/Areas/Receiving/Views/Shared/_layoutReceiving.cshtml";
    ViewBag.Title = Model.ProcessId == null ? "Create Process" : string.Format("Edit Process #{0}", Model.ProcessId);
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}


<div class="container">
    <div class="page-header">
        <span class="pull-right">
            <a href="@Url.Action(MVC_Receiving.Receiving.Home.Index())">
                <span class="glyphicon glyphicon-link"></span>
                Recent Process
            </a>
        </span>
        <h2>Create Process</h2>
    </div>
    @using (Html.BeginForm(MVC_Receiving.Receiving.Home.EditProcess(), FormMethod.Post, new
    {
        @class = "form-horizontal",
        role = "form"
    }))
    {
        @Html.HiddenFor(m => m.ProcessId)
        <div class="form-group">
            <label for="ddlReceivingArea" class="col-sm-2 control-label">Receive In <sup><i class="glyphicon glyphicon-asterisk"></i></sup></label>
            <div class="col-sm-10">
                @Html.GroupDropListFor(m => m.ReceivingAreaId, Model.ReceivingAreasList, "(Select Any Area)", new { id = "ddlReceivingArea", @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <label for="ddlSpotCheckArea" class="col-sm-2 control-label">Spot Check Area <sup><i class="glyphicon glyphicon-asterisk"></i></sup></label>
            <div class="col-sm-10">
                @Html.DropDownListFor(m => m.SpotCheckAreaId, Model.SpotCheckAreasList, "(Select Any Area)", new
           {
               id = "ddlSpotCheckArea",
               @class = "form-control"
           })
            </div>
        </div>
        <div class="form-group">
            <label for="ddlPriceSeasonCode" class="col-sm-2 control-label">Season Code</label>
            <div class="col-sm-10">
                @Html.DropDownListFor(m => m.PriceSeasonCode, Model.PriceSeasonCodeList, "(No Change)", new
           {
               id = "ddlPriceSeasonCode",
               @class = "form-control"
           })
            </div>
        </div>
        <div class="form-group has-feedback">
            <label for="txtboxExpectedCarton" class="col-sm-2 control-label">Expected Cartons <sup><i class="glyphicon glyphicon-asterisk"></i></sup></label>
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.ExpectedCartons, new
           {
               id = "txtboxExpectedCarton",
               maxlength = "5",
               @class = "form-control",
               type = "number"
           })
            </div>
        </div>
        <div class="form-group">
            <label for="txtBoxPalletLimit" class="col-sm-2 control-label">Max Cartons Per Pallet</label>
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.PalletLimit, new
           {
               id = "txtBoxPalletLimit",
               maxlength = 4,
               @class = "form-control",
               type = "number",
               size = 4
           })
            </div>
        </div>
        <div class="form-group">
            <label for="txtBoxPro" class="col-sm-2 control-label">Pro # <sup><i class="glyphicon glyphicon-asterisk"></i></sup></label>

            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.ProNumber, new
           {
               id = "txtBoxPro",
               maxlength = "25",
               @class = "form-control"
           })

            </div>
        </div>

        <div class="form-group">
            <label for="tbProDate" class="col-sm-2 control-label">
                @ModelMetadata.FromLambdaExpression(m => m.ProDate, this.ViewData).DisplayName <sup><i class="glyphicon glyphicon-asterisk"></i></sup>
            </label>
            <div class="col-sm-10">
                <input name="@Html.NameFor(m => m.ProDate)" value="@string.Format("{0:d}", Model.ProDate)" id="tbProDate" size="10" maxlength="10" class="form-control" type="date" />
            </div>
        </div>
        <div class="form-group">
            <label for="tbCarrier" class="col-sm-2 control-label">Carrier <sup>&darr;<i class="glyphicon glyphicon-asterisk"></i></sup></label>
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.CarrierId, new
   {
       id = "tbCarrier",
       size = 15,
       maxlength = 4,
       @class = "form-control",
       data_url = Url.Action(MVC_Receiving.Receiving.AutoComplete.GetCarriers())
   })

            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">             
                @if (Model.ProcessId.HasValue)
                {
                    <button type="submit" class="btn btn-default">Save and Continue</button>
                    @Html.ActionLink("Continue without saving", MVC_Receiving.Receiving.Home.Receiving(Model.ProcessId))
                }
                else
                {
                    <button type="submit" class="btn btn-primary">Create New</button>
                }
            </div>
        </div>
    }
</div>

@section script {
    <script src="@Links_Receiving.Scripts.jquery_validate_js" type="text/javascript"></script>
    <script src="@Links_Receiving.Scripts.jquery_validate_unobtrusive_js" type="text/javascript"></script>
    <script type="text/javascript">
        $(document).ready(function () {            
            // Select SpotCheck area based on the selection of receiving area.
            $('#ddlReceivingArea').change(function () {
                var building = $('#ddlReceivingArea').val();
                var items;
                $.getJSON($('#ddlSpotCheckArea').attr('data-source-url').replace("X", building), function (data) {
                    if (data.length != 1) {
                        items = '<option value ="">(Please Select)</option>';
                    }
                    var $select = $('#ddlSpotCheckArea');
                    $.each(data, function (i, area) {
                        items += "<option value='" + area.Value + "'>" + area.Text + "</option>";
                    });
                    $select.html(items);
                });
            });

            // The autocomplete widget must trigger th change event even if the value in the text box has not changed
            $.widget("ui.autocomplete", $.ui.autocomplete, {
                _change: function (event) {
                    //if (this.previous !== this._value()) {
                    this._trigger("change", event, { item: this.selectedItem });
                    //}
                },
            });

            $('#tbCarrier', this).each(function (i, elem) {
                $(elem).autocomplete({
                    delay: 2000,
                    minLength: 1,
                    source: $(elem).attr('data-url'),
                    change: function (event, ui) {
                        var formval = ('#processForm');
                        var $label = $('span[data-valmsg-for=' + this.name + ']', formval)
                            .removeClass('field-validation-valid field-validation-error')
                            .addClass('field-validation-description')
                            .empty();
                        var val = $(this).val();
                        if (!val) {
                            // Text box is empty. No description needed
                            $('span[data-valmsg-for=' + this.name + ']', formval).removeClass('field-validation-description').addClass('field-validation-error');
                            return;
                        }

                        if (ui.item && ui.item.value == val) {
                            // User chose from the list
                            $label.text(ui.item.label);
                            return;
                        }

                        // User scanned the UPC without selecting from list. Get description via ajax call
                        $.getJSON($(this).autocomplete('option', 'source'), { term: val }, $.proxy(function (data) {
                            if (data && data.length > 0 && data[0].value == this.val) {
                                $label.text(data[0].label);
                            } else {
                                $label.text('Bad choice');
                            }
                        }, { val: val }));
                    }
                }).on('dblclick', function (e) {
                    $(this).autocomplete('option', 'minLength', 0).autocomplete('search', '').autocomplete('option', 'minLength', 1);
                });
            });
        });
    </script>
}
<!--$Id: _processPartial.cshtml 11704 2012-01-21 06:12:33Z rkandari $-->
