<!--  Contract Reviewed by: Binod Kumar 17th Sept 2011.
     1. Following attribs are used in our code
    data-ajax-url: We keep URL of handle scan.
    -->
@model DcmsMobile.Receiving.ViewModels.Home.ReceivingViewModel
@{
    Layout = MVC_Receiving.Receiving.Shared.Views._layoutReceiving;
}

<audio id="soundSuccess" src="@Links_Receiving.Areas.Receiving.Content.Sounds.success_mp3">
    Your browser does not support the HTML5 Audio element.
</audio>
<audio id="soundError" src="@Links_Receiving.Areas.Receiving.Content.Sounds.Error_mp3">
    Your browser does not support the HTML5 Audio element.
</audio>

<div class="container">
    <div class="page-header">

        <span class="pull-right">
            <a href="@string.Format("{0}?process_id={1}", Model.ProcessDetailUrl, Model.ProcessId)"
               title="Receiving Detail for the selected Process" target="_blank"
               class=" btn btn-link">
                <span class="glyphicon glyphicon-new-window"></span>
                @*Report 40.103:*@ Cartons received and shipments summary
            </a>
        </span>
        <h2>
            Receiving
            <small>Carrier  @Html.DisplayFor(m => m.CarrierId) @Html.DisplayFor(m => m.CarrierDescription)</small>
        </h2>
    </div>

    <p>
        @Html.LabelFor(m => m.ProcessId)
        @Html.DisplayFor(m => m.ProcessId)
        &nbsp;
        @Html.LabelFor(m => m.ExpectedCartons)
        @Html.DisplayFor(m => m.ExpectedCartons)
        &nbsp;
        @Html.LabelFor(m => m.ProDate)
        @Html.DisplayFor(m => m.ProDate)
        &nbsp;
        @Html.LabelFor(m => m.ProNumber)
        @Html.DisplayFor(m => m.ProNumber)
        &nbsp;
        @Html.LabelFor(m => m.PriceSeasonCode)
        @Html.DisplayFor(m => m.PriceSeasonCode)
        &nbsp;
        @Html.LabelFor(m => m.OperatorName)
        @Html.DisplayFor(m => m.OperatorName)
    </p>

    <div class="panel panel-info">
        <div class="panel-heading">
            <div class="row">
                <div class="col-md-3">
                    <strong class="text-info"><span class="glyphicon glyphicon-barcode"></span> Scan Carton or Pallet</strong>
                    <div id="scanArea" class="input-group" data-name-palletid="@(EclipseLibrary.Mvc.Helpers.ReflectionHelpers.NameFor<DcmsMobile.Receiving.ViewModels.Home.ScanViewModel, object>( m => m.PalletId))"
                         data-name-dispos="@(EclipseLibrary.Mvc.Helpers.ReflectionHelpers.NameFor<DcmsMobile.Receiving.ViewModels.Home.ScanViewModel, object>( m => m.PalletDispos))">
                        <input type="hidden" name="@(EclipseLibrary.Mvc.Helpers.ReflectionHelpers.NameFor<DcmsMobile.Receiving.ViewModels.Home.ScanViewModel, int?>( m => m.ProcessId))"
                               value="@Model.ProcessId" />
                        <textarea class="form-control" rows="4" spellcheck="false" id="tbScan" autofocus
                                  name="@(EclipseLibrary.Mvc.Helpers.ReflectionHelpers.NameFor<DcmsMobile.Receiving.ViewModels.Home.ScanViewModel, object>( m => m.ScanText))"
                                  data-pallet-url="@Url.Action(MVC_Receiving.Receiving.Home.HandlePalletScan())"
                                  data-carton-url="@Url.Action(MVC_Receiving.Receiving.Home.HandleCartonScan())"
                                  tabindex="0"></textarea>
                        <span class="input-group-btn">
                            <button class="btn btn-primary" type="submit" style="height:5.61em;">Go!</button>
                        </span>

                    </div>
                </div>
                <div class="col-md-9">
                    Received <em><span style="font-size:2em" id="receivedCount">@Model.CartonCount</span> of @Html.DisplayFor(m => m.ExpectedCartons) cartons</em>
                    <div class="progress" style="margin-bottom:4px;" id="progressCartons">
                        <div class="progress-bar progress-bar-@(Model.percentReceivedCartons > 99  ? "success" : "")" role="progressbar" aria-valuenow="@Model.CartonCount " aria-valuemin=" 0" aria-valuemax="@Model.ExpectedCartons" style="width: @Model.percentReceivedCartons%;min-width:20px;">
                            <span>@Model.percentReceivedCartons</span>%
                        </div>
                    </div>
                    <div class="btn-group">
                        <button id="btnNewPallet" class="btn btn-default" type="button" data-new-pallet="@Model.ScanModel.ScanText">
                            <span class="glyphicon glyphicon-plus-sign"></span>  New Pallet
                        </button>
                        <a href="@Url.Action(MVC_Receiving.Receiving.Home.CreateProcess(Model.ProcessId))" class="btn btn-default"><span class="glyphicon glyphicon-edit"></span> Edit Process</a>
                        <a href="@Url.Action(MVC_Receiving.Receiving.Home.Index())" class="btn btn-default"><span class="glyphicon glyphicon-home"></span> Change Process</a>
                        <a href="#" id="linkShowCarton" class="btn btn-default"><span class="glyphicon glyphicon glyphicon-list-alt"></span> Cartons received but not on Pallet...</a>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- Nav tabs -->
    <ul class="nav nav-tabs bg-info" role="tablist" id="palletTabs">
        @for (var i = 0; i < Model.Pallets.Count; i++)
        {
            <li class="@(i==0? "active":"")" data-palletid="@Model.Pallets[i].PalletId">

                <a href='#Pallet_@(Model.Pallets[i].PalletId)' role="tab" data-toggle="tab"
                   title='Pallet @Model.Pallets[i].PalletId'>
                    @(Model.Pallets[i].PalletId)
                    <span title="Remove Pallet" class='glyphicon glyphicon-remove-sign text-info'></span>
                </a>
            </li>
        }

    </ul>
    <!-- Tab panes -->
    <div class="tab-content" id="palletTabContent">

        @for (var i = 0; i < Model.Pallets.Count; i++)
        {
            <div id="Pallet_@(Model.Pallets[i].PalletId)" class="@(i==0? "active":"") tab-pane">
                @Html.Partial(MVC_Receiving.Receiving.Home.Views._palletPartial, Model.Pallets[i])
            </div>
        }
    </div>
    <!-- Print Modal called from _palletPartialPage -->
    <div class="modal fade" id="printModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title" id="myModalLabel">
                        Print Carton <span class="cartonId" data-name="@MVC_Receiving.Receiving.Home.PrintCartonParams.cartonId">This will be replaced by the actual carton id when dialog is opened</span>
                    </h4>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger hidden" role="alert">Please select a printer</div>
                    <div class="form-horizontal">
                        <div class="form-group">
                            <label for="ddlPrinter" class="col-sm-2 control-label">Printer <abbr>*</abbr></label>
                            <div class="col-sm-10">
                                <select id="ddlprinters" class="form-control" data-getprinters-url='@Url.Action(MVC_Receiving.Receiving.Home.GetPrinters())'
                                        name="@MVC_Receiving.Receiving.Home.PrintCartonParams.printer" required></select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnPrint" data-print-url="@Url.Action(MVC_Receiving.Receiving.Home.PrintCarton())"><span class="glyphicon glyphicon-print"></span> Print</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>

            </div>

        </div>



    </div>

    <!--Remove Carton Model(Pop-up)-->
    <div class="modal fade" id="removeModal" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="myModalLabel">
                        Remove Carton <span class="cartonId" data-name="@MVC_Receiving.Receiving.Home.UnPalletizeCartonParams.cartonId"></span>
                        from Pallet <span class="palletId"></span>?
                    </h4>
                </div>

                <div class="modal-body">
                    <span data-name="@MVC_Receiving.Receiving.Home.UnPalletizeCartonParams.processId" class="processId hidden">@Model.ProcessId</span>
                    <span>
                        Pallet <span class="palletId"></span> contains <span class="count"></span> cartons. If you have just received this carton, it will also be unreceived. Press Ok to confirm.
                    </span>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" data-url="@Url.Action(MVC_Receiving.Receiving.Home.UnPalletizeCarton())" id="btnRemove">Ok</button>
                    <button class="btn btn-default" data-dismiss="modal">Cancel</button>
                </div>
            </div>

        </div>



    </div>


</div>
@section script{
    <!-- Closing tabs inspired from
     http://jeykeu.wordpress.com/2013/07/27/dynamically-add-remove-and-re-number-tabs-in-twitter-bootstrap/-->

    <script type="text/javascript">

        // Plays the error sound twice
        function PlayErrorSound() {
            $('#soundError').one('ended', function (e) {
                this.play();
            })[0].play();
        }

        function PlaySuccessSound() {
            $('#soundSuccess')[0].play();
        }

        // Returns the active pallet id.
        function GetActivePalletId() {
            return $('#palletTabs > li.active').data('palletid');
        }

        // Makes the passed pallet active, if possible. If a tab for this pallet does not exist, a new tab is created and is then made active with no content
        function SetActivePallet(palletId) {
            //alert($('#palletTabs > li[data-palletid="P3978"] > a').length);
            var x = $('#palletTabs > li[data-palletid="' + palletId + '"] > a').tab('show');
            //alert(x.length);
            if (x.length > 0) {
                // We were able to activate the pallet
                return;
            }
            // No such pallet. Create a new tab at the end of the tabs

            @*<li class="@(i==0? "active":"")" data-palletid="@Model.Pallets[i].PalletId">

    <a href='#Pallet_@(Model.Pallets[i].PalletId)' role="tab" data-toggle="tab"
            title='Pallet @Model.Pallets[i].PalletId'>
             @(Model.Pallets[i].PalletId)
             <span title="Remove Pallet" class='glyphicon glyphicon-remove-sign text-info'></span>
         </a>
     </li>*@
            // Insert the li
            var y = $('<li></li>').attr('data-palletid', palletId)
                .append(
                    $('<a></a>').attr({
                        href: '#Pallet_' + palletId,
                        role: 'tab',
                        "data-toggle": 'tab',
                        title: 'Pallet ' + palletId
                    }).text(palletId).append('<span title="Remove Pallet" class="glyphicon glyphicon-remove-sign text-info"></span>')
                ).appendTo('#palletTabs');

            @*<div id="Pallet_@(Model.Pallets[i].PalletId)" class="@(i==0? "active":"") tab-pane">
        @Html.Partial(MVC_Receiving.Receiving.Home.Views._palletPartial, Model.Pallets[i])
    </div>*@

            //
            $('<div></div>').attr('id', 'Pallet_' + palletId).addClass('tab-pane').text('Sharad')
                .appendTo('#palletTabContent');

            // Make the tab active
            $('#palletTabs > li[data-palletid="' + palletId + '"] > a').tab('show');
        }


        // Update the html content of the active tab. Also update progress bar based on the number of cartons in the new html
        function UpdateActivePallet(html) {
            // Private function for updating progress bar. Pass negative for decrement
            function UpdateProgressBar(increment) {
                var $bar = $('#progressCartons div.progress-bar');
                var val = parseInt($bar.attr('aria-valuenow')) + increment;
                var maxval = parseInt($bar.attr('aria-valuemax'));
                var pct = Math.round(val * 100 / maxval);
                $bar.attr('aria-valuenow', val)
                    .css('width', pct + '%')
                    .find('span').text(pct);
                var count = parseInt($('#receivedCount').text());
                $('#receivedCount').text(count + increment);
            }

            var $pane = $('#palletTabContent div.active.tab-pane');
            var countOld = $('[data-carton]', $pane).length;
            $pane.html(html);
            var countNew = $('[data-carton]', $pane).length;
            UpdateProgressBar(countNew - countOld);
        }



        (function ($) {
            var _timer;
            // Handles the scans in the text area after the specified delay in milliseconds.
            // this is the DOM element of the text area which contains the scans
            // Called as: $('#mytextarea').handleScan(3000);
            $.fn.handleScan = function (delay) {
                if (_timer) {
                    clearTimeout(_timer);
                    _timer = null;
                }

                var tokens = $.grep($(this).val().split('\n'), function (txt, i) {
                    // Ignore empty lines
                    return txt.trim() != '';
                });
                if (tokens.length == 0) {
                    // Text box is empty. Nothing to do
                    return;
                }

                var def = $.Deferred();
                def.resolve();  // Initiate the function chain

                var lastscan = tokens[tokens.length - 1];

                if (lastscan.toUpperCase().indexOf('P') === 0) {
                    // First process the cartons before this pallet
                    if (tokens.length > 1) {
                        // Some cartons were scanned before this pallet
                        def = def.then(HandleCartons.bind({
                            cartons: tokens.slice(0, tokens.length - 1),
                            url: $(this).data('carton-url')
                        }));
                    }
                    def.then(ChangePallet.bind({
                        url: $(this).data('pallet-url'),
                        palletId: lastscan
                    }));
                } else {
                    _timer = setTimeout(HandleCartons.bind({
                        url: $(this).data('carton-url'),
                        cartons: tokens
                    }), delay);
                }

            };

            // Pass this.url. Returns ajax object so that we can chain functions to be executed after ajax call is complete
            // Should be private
            function HandleCartons() {
                //alert(this.url);
                var $form = $('#scanArea');
                var data = $('input', $form).serializeArray();
                //data[$('#scanArea textarea').attr('name')] = this.cartons;
                data.push({ name: $('textarea', $form).attr('name'), value: this.cartons })

                // Active pallet id
                data.push({ name: $form.data('name-palletid'), value: GetActivePalletId() })

                // Disposition of active pallet
                data.push({ name: $form.data('name-dispos'), value: $('#palletTabContent .tab-pane.active [data-disposition]').data('disposition') })

                return $.post(this.url, data).then(function (data, textStatus, jqXHR) {
                    //$('#tbScan').attr('data-content', textStatus).popover('show');
                    //alert('Carton receive success ' + data);
                    UpdateActivePallet(data);
                }, function (jqXHR, textStatus, errorThrown) {
                    PlayErrorSound();
                    $('#tbScan').attr('data-content', jqXHR.responseText).popover('show');
                });
            }

            // Expects this.palletId, this.url
            // Returns ajax object to enable further chaining
            // Should be private
            function ChangePallet() {
                //alert('Pallet ' + this.palletId);
                //TODO: Ajax call to HandlePalletScan()
                var data = $('#scanArea input').serializeArray();

                data.push({ name: $('#scanArea textarea').attr('name'), value: this.palletId });
                //alert(data);
                return $.post(this.url, data).then(function (data, textStatus, jqXHR) {
                    // data is pallet html
                    // find whether this pallet is already one of the tabs. If it is, then close that tab.
                    // Then create a new tab for this pallet and make it active.
                    //alert($('#palletTabContent div.tab-pane[data-pallet="P3978"]').attr('id'));\
                    SetActivePallet(this.palletId);
                    UpdateActivePallet(data);
                    //alert(this.palletId + '*' + data);
                }.bind({
                    palletId: this.palletId
                }), function (jqXHR, textStatus, errorThrown) {
                    PlayErrorSound();
                    $('#tbScan').attr('data-content', jqXHR.responseText).popover('show');
                   // alert('Error: ' + jqXHR.responseText);
                });
            }

            // End of closure.
        })(jQuery);


        // Handle scan
        $(document).ready(function () {
            var _timer;

            $('#scanArea').on('keypress', 'textarea', function (e) {
                if (e.which != 13) {
                    // We are interested only when enter key is pressed
                    return;
                }
                $('#soundSuccess')[0].play();
                $(this).handleScan(3000);
            }).on('click', 'button', function (e) {
                PlaySuccessSound();
                $('textarea', e.delegateTarget).handleScan(0);
            }).find('textarea').popover({
                trigger: 'manual',
                html: true,
                title: '<span class="text-danger"><span class="glyphicon glyphicon-warning-sign"></span> Error Message</span><a class="close text-danger" href="#">&times;</a>',
                placement: 'top',
                container: 'body'
            });

            // Hide the popover when the X in the title is clicked
            $(document).on('click', '.close', function (e) {
              //hiding the error message popover and at the same doing empty textarea with focus.
                $('#tbScan').popover('hide').empty().focus();                
            });
        });

        $(document).ready(function () {
            $('#btnNewPallet').click(function (e) {
                alert('auto increment tab with pallet id');
            });

            // Close pallet tab when close icon is clicked
            $('#palletTabs').on('click', '.glyphicon-remove-sign', function (e) {
                var $li = $(this).closest('li');
                if ($li.is('.active')) {
                    // If the visible tab is being removed, first make something else visible
                    // Try to show the next tab
                    var $nextli = $li.next();
                    if ($nextli.length == 0) {
                        // If no next, then show first
                        $nextli = $('li:first', e.delegateTarget);
                    }
                    $('a', $nextli).tab('show');
                }
                // Remove content first
                var contentSelector = $('a', $li).attr('href');  // e.g. #tab2
                $(contentSelector).remove();
                // Now remove tab
                $li.remove();

            });

        });



        // Remove carton from pallet
        $(document).ready(function () {
            var $dlg = $('#removeModal');
            $('#palletTabContent').on('click', 'div.active [data-action="remove"]', function (e) {
                // Print button in the partial view clicked. Show print dialog. Also pupulate carton and pallet within the modal
                $('span.cartonId', this).text($(e.target).closest('[data-carton]').data('carton'));
                $('span.palletId', this).text(GetActivePalletId());
                $('span.count', this).text($(e.target).closest('div.tab-pane').find('[data-carton]').length);
                $dlg.modal('show');
            }.bind($dlg));

            // Supply carton id to modals before they open
            $dlg.on('click', '#btnRemove', function (e) {
                //remove the carton from pallet.
                // The text of all spans with data-name attribute will be posted
                var data = new Object();
                $('span[data-name]', e.delegateTarget).each(function () {
                    data[$(this).attr('data-name')] = $(this).text();
                });
                $.post($(this).data('url'), data)
                    .then(function (data, textStatus, jqXHR) {
                        $(this.dlg).modal('hide');
                        UpdateActivePallet(data);
                    }.bind({
                        dlg: e.delegateTarget
                    }), function (jqXHR, textStatus, errorThrown) {
                        PlayErrorSound();
                        alert('Error: ' + jqXHR.responseText);
                    });
            });
        });

        // Print carton label
        $(document).ready(function () {

            $('#palletTabContent').on('click', '[data-action="print"]', function (e) {
                // Print button in the partial view clicked. Show print dialog
                $('#printModal')
                    .find('span.cartonId')
                    .text($(this).closest('[data-carton]').data('carton'))
                    .end()
                    .find('.alert')
                    .addClass('hidden')
                    .removeClass(function (index, css) {
                        // Remove alert-* classes from the alert. The appropriate class will be added later
                        return (css.match(/(^|\s)alert-\S+/g) || []).join(' ');
                    }).end()
                    .modal('show');
            });

            $('#printModal').one('show.bs.modal', function (e) {
                // Populate the printer drop down when shown first time
                var $ddlPrinters = $('#ddlprinters');
                $.get($ddlPrinters.data('getprinters-url'))
                    .then(function (printers, textStatus, jqXHR) {
                        // Success. We have got the list of printers
                        //var selected = jqXHR.getResponseHeader("Selected");
                        $.each(printers, function (i, printer) {
                            var x = $('<option></option>').val(printer.Name).text(printer.Name + ' : ' + printer.Description);
                            if (printer.Name === this.selected) {
                                x.attr('selected', 'selected');
                            }
                            this.ddl.append(x);
                        }.bind({
                            ddl: this.ddl,
                            selected: jqXHR.getResponseHeader("Selected")
                        }));
                    }.bind({
                        ddl: $ddlPrinters
                    }), function (jqXHR, textStatus, errorThrown) {
                        // Some error
                        var x = $('<option></option>').val('')
                            .html('<span class="bg-danger">Could not retrieve printer list: ' + textStatus + ' ' + jqXHR.status + '</span>');
                        this.append(x);
                    }.bind(this));
            }).on('click', '#btnPrint', function (e) {
                // Print the carton label
                // Remove alert-* classes from the alert. The appropriate class will be added later
                var $alert = $(".alert", e.delegateTarget).removeClass('hidden');
                var $ddl = $('#ddlprinters', e.delegateTarget);
                if (!$ddl.val()) {
                    $alert.text("Please select a printer").addClass('alert-warning');
                    return;
                }
                var data = new Object();
                $('span[data-name]', e.delegateTarget).each(function (index, elem) {
                    this[$(elem).attr('data-name')] = $(elem).text();
                }.bind(data));
                data[$ddl.attr('name')] = $ddl.val();
                $.post($(this).attr('data-print-url'), data)
                    .then(function (data, textStatus, jqXHR) {
                        // success
                        this.html(data);
                        switch (jqXHR.status) {
                            case 203:
                                this.addClass('alert-warning');
                                break;

                            default:
                                this.addClass('alert-success');
                                break;
                        }
                    }.bind($alert), function (jqXHR, textStatus, errorThrown) {
                        // Error
                        this.addClass('alert-danger').html(jqXHR.responseText);
                    }.bind($alert));
            });

        });
    </script>
}


