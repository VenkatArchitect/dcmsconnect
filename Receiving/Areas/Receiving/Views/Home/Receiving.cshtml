<!--  Contract Reviewed by: Binod Kumar 17th Sept 2011.
     1. Following attribs are used in our code
    data-ajax-url: We keep URL of handle scan.
    -->
@model DcmsMobile.Receiving.ViewModels.Home.ReceivingViewModel
@{
    Layout = MVC_Receiving.Receiving.Shared.Views._layoutReceiving;
}

<audio id="soundSuccess" src="@Links_Receiving.Areas.Receiving.Content.Sounds.success_mp3">
    Your browser does not support the HTML5 Audio element.
</audio>
<audio id="soundError" src="@Links_Receiving.Areas.Receiving.Content.Sounds.Error_mp3">
    Your browser does not support the HTML5 Audio element.
</audio>

<div class="container">
    <div class="page-header">

        <span class="pull-right">
            <a href="@string.Format("{0}?process_id={1}", Model.ProcessDetailUrl, Model.ProcessId)"
               title="Receiving Detail for the selected Process" target="_blank"
               class=" btn btn-link">
                <span class="glyphicon glyphicon-new-window"></span>
                @*Report 40.103:*@ Cartons received and shipments summary
            </a>
        </span>
        <h2>
            Receiving
            <small>Carrier  @Html.DisplayFor(m => m.CarrierId) @*@Html.DisplayFor(m => m.CarrierDescription)*@</small>
        </h2>
    </div>

    <p>
        @Html.LabelFor(m => m.ProcessId)
        @Html.DisplayFor(m => m.ProcessId)
        &nbsp;
        @Html.LabelFor(m => m.ExpectedCartons)
        @Html.DisplayFor(m => m.ExpectedCartons)
        &nbsp;
        @Html.LabelFor(m => m.ProDate)
        @Html.DisplayFor(m => m.ProDate)
        &nbsp;
        @Html.LabelFor(m => m.ProNumber)
        @Html.DisplayFor(m => m.ProNumber)
        &nbsp;
        @Html.LabelFor(m => m.PriceSeasonCode)
        @Html.DisplayFor(m => m.PriceSeasonCode)
        &nbsp;
        @Html.LabelFor(m => m.OperatorName)
        @Html.DisplayFor(m => m.OperatorName)
    </p>

    <div class="panel panel-info">
        <div class="panel-heading">
            <div class="row">
                <div class="col-md-3">
                    <strong class="text-info"><span class="glyphicon glyphicon-barcode"></span> Scan Carton or Pallet</strong>
                    <div id="scanArea" class="input-group"
                         data-name-palletid="@(EclipseLibrary.Mvc.Helpers.ReflectionHelpers.NameFor<DcmsMobile.Receiving.ViewModels.Home.ScanViewModel, object>( m => m.PalletId))"
                         data-name-dispos="@(EclipseLibrary.Mvc.Helpers.ReflectionHelpers.NameFor<DcmsMobile.Receiving.ViewModels.Home.ScanViewModel, object>( m => m.PalletDispos))"
                         data-name-processid="@(EclipseLibrary.Mvc.Helpers.ReflectionHelpers.NameFor<DcmsMobile.Receiving.ViewModels.Home.ScanViewModel, int?>( m => m.ProcessId))">
                        @*<input type="hidden" name="@(EclipseLibrary.Mvc.Helpers.ReflectionHelpers.NameFor<DcmsMobile.Receiving.ViewModels.Home.ScanViewModel, int?>( m => m.ProcessId))"
                            value="@Model.ProcessId" />*@
                        <textarea class="form-control" rows="4" spellcheck="false" id="tbScan" autofocus
                                  name="@(EclipseLibrary.Mvc.Helpers.ReflectionHelpers.NameFor<DcmsMobile.Receiving.ViewModels.Home.ScanViewModel, object>( m => m.ScanText))"
                                  data-pallet-url="@Url.Action(MVC_Receiving.Receiving.Home.HandlePalletScan())"
                                  data-carton-url="@Url.Action(MVC_Receiving.Receiving.Home.HandleCartonScan())"
                                  tabindex="0"></textarea>
                        <span class="input-group-btn">
                            <button class="btn btn-primary" type="submit" style="height:5.61em;"><img src="@Links_Receiving.Areas.Receiving.Content.images.ajax_loader_gif" alt="ajaxLoader" class="hidden" /><span>Go</span></button>
                        </span>

                    </div>
                </div>
                <div class="col-md-9">
                    Received <em><span style="font-size:2em" id="receivedCount">@Model.CartonCount</span> of @Html.DisplayFor(m => m.ExpectedCartons) cartons</em>
                    <div class="progress" style="margin-bottom:4px;" id="progressCartons">
                        <div class="progress-bar progress-bar-@(Model.PercentReceivedCartons > 99  ? "success" : "")" role="progressbar" aria-valuenow="@Model.CartonCount " aria-valuemin=" 0"
                             aria-valuemax="@Model.ExpectedCartons" style="width: @Model.PercentReceivedCartons%;min-width:20px;">
                            <span>@Model.PercentReceivedCartons</span>%
                        </div>
                    </div>
                    <div class="btn-group">
                        <button id="btnNewPallet" class="btn btn-default" type="button">
                            <span class="glyphicon glyphicon-plus-sign"></span>  New Pallet
                        </button>
                        <a href="@Url.Action(MVC_Receiving.Receiving.Home.CreateProcess(Model.ProcessId))" class="btn btn-default"><span class="glyphicon glyphicon-edit"></span> Edit Process</a>
                        <a href="@Url.Action(MVC_Receiving.Receiving.Home.Index())" class="btn btn-default"><span class="glyphicon glyphicon-home"></span> Change Process</a>
                        <a href="#" id="linkShowCarton" class="btn btn-default"><span class="glyphicon glyphicon glyphicon-list-alt"></span> Cartons received but not on Pallet...</a>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- Nav tabs -->
    <ul class="nav nav-tabs bg-info" role="tablist" id="palletTabs">
        @*@for (var i = 0; i < Model.PalletIdList.Count; i++)
            {
                <li data-palletid="@Model.PalletIdList[i]">

                    <a href='#Pallet_@(Model.PalletIdList[i])' role="tab" data-toggle="tab"
                       title='Pallet @Model.PalletIdList[i]'>
                        @(Model.PalletIdList[i])
                        <span title="Remove Pallet" class='glyphicon glyphicon-remove-sign text-info'></span>
                    </a>
                </li>
            }*@

    </ul>
    <!-- Tab panes -->
    <div class="tab-content" id="palletTabContent">

        @*@for (var i = 0; i < Model.PalletIdList.Count; i++)
            {
                <div id="Pallet_@(Model.PalletIdList[i])" class="tab-pane">

                </div>
            }*@
    </div>
    <!-- Print Modal called from _palletPartialPage -->
    <div class="modal fade" id="printModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title" id="myModalLabel">
                        Print Carton <span class="cartonId" data-name="@MVC_Receiving.Receiving.Home.PrintCartonParams.cartonId">This will be replaced by the actual carton id when dialog is opened</span>
                    </h4>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger hidden" role="alert">Please select a printer</div>
                    <div class="form-horizontal">
                        <div class="form-group">
                            <label for="ddlPrinter" class="col-sm-2 control-label">Printer <abbr>*</abbr></label>
                            <div class="col-sm-10">
                                <select id="ddlprinters" class="form-control" data-getprinters-url='@Url.Action(MVC_Receiving.Receiving.Home.GetPrinters())'
                                        name="@MVC_Receiving.Receiving.Home.PrintCartonParams.printer" required></select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnPrint" data-print-url="@Url.Action(MVC_Receiving.Receiving.Home.PrintCarton())"><span class="glyphicon glyphicon-print"></span> Print</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>

            </div>

        </div>



    </div>

    <!--Remove Carton Model(Pop-up)-->
    <div class="modal fade" id="removeModal" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="myModalLabel">
                        Remove Carton <span class="cartonId" data-name="@MVC_Receiving.Receiving.Home.UnPalletizeCartonParams.cartonId"></span>
                        from Pallet <span class="palletId"></span>?
                    </h4>
                </div>

                <div class="modal-body">
                    <span data-name="@MVC_Receiving.Receiving.Home.UnPalletizeCartonParams.processId" class="processId hidden">@Model.ProcessId</span>
                    <span>
                        Pallet <span class="palletId"></span> contains <span class="count"></span> cartons. If you have just received this carton, it will also be unreceived. Press Ok to confirm.
                    </span>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" data-url="@Url.Action(MVC_Receiving.Receiving.Home.UnPalletizeCarton())" id="btnRemove">Ok</button>
                    <button class="btn btn-default" data-dismiss="modal">Cancel</button>
                </div>
            </div>

        </div>



    </div>


</div>
@section script{
    <!-- Closing tabs inspired from
     http://jeykeu.wordpress.com/2013/07/27/dynamically-add-remove-and-re-number-tabs-in-twitter-bootstrap/-->

    <script type="text/javascript">
        "use strict";
        // This global holds the current process id
        var _processId = @(Model.ProcessId.HasValue ? Model.ProcessId.Value.ToString() : "null");


        // Sound functions. Module Pattern from http://learn.jquery.com/code-organization/concepts/
        var Sound = (function() {
            // All external dependencies should be part of options
            var _options = {
                // Selector to error sound audio element
                error: null,
                // Selector to success sound audio element
                success: null
            };

            var init = function(options) {
                _options = $.extend(_options, options);
            };

            var error = function() {
                $(_options.error).one('ended', function (e) {
                    this.play();
                })[0].play();
            };

            var success = function() {
                $(_options.success)[0].play();
            }
            // public API
            return {
                init: init,
                error: error,
                success: success
            };
        })();

        var Progress = (function() {
            var update = function(increment) {
                var $bar = $('#progressCartons div.progress-bar');
                var val = parseInt($bar.attr('aria-valuenow')) + increment;
                var maxval = parseInt($bar.attr('aria-valuemax'));
                var pct = Math.round(val * 100 / maxval);
                $bar.attr('aria-valuenow', val)
                    .css('width', pct + '%')
                    .find('span').text(pct);
                var count = parseInt($('#receivedCount').text());
                $('#receivedCount').text(count + increment);
            };
            return {
                update: update
            };
        })();

        // Functios to work with tabs. Tabs can be referenced by pallet id.
        var Tabs = (function() {

            var _options = {
                // Selector for tab container
                tabContainer: '', //'#palletTabs',
                // Selector to container containing tab content
                contentContainer: '',  //'#palletTabContent',
                // Name of the attribute of LI containing pallet id
                attrPalletId: '', //'data-palletid',
                // The URL which is responsible for returning pallet html
                // The URL should contain a placeholder ~ which will be replaced by the pallet id
                loadUrl: '',
                // Array of pallet ids for which tabs should be initially created
                pallets: []
            };


            var init = function(options) {
                _options = $.extend(_options, options);
                var $li;
                $.each(_options.pallets, function(i, val) {
                    var x = Tabs.create(val);
                    if (i == 0) {
                        $li = x;
                    }
                });
                $('a', $li).tab('show');
            };

            // Returns the pallet id corresponding to the active tab
            var activePalletId = function () {
                return $('> li.active', _options.tabContainer).attr(_options.attrPalletId);
            };

            // Creates a new tab. Does not ensure whether the tab for this pallet already exists.
            // Returns jquery object corresponding to the newly created li
            var create = function(palletId) {
                // Insert content div
                $('<div></div>').attr('id', 'Pallet_' + palletId).addClass('tab-pane')
                    .appendTo(_options.contentContainer);

                // Insert the li and return it
                return $('<li></li>').attr(_options.attrPalletId, palletId)
                    .append(
                        $('<a></a>').attr({
                            href: '#Pallet_' + palletId,
                            role: 'tab',
                            "data-toggle": 'tab',
                            title: 'Pallet ' + palletId
                        }).text(palletId).append('<span title="Remove Pallet" class="glyphicon glyphicon-remove-sign text-info"></span>')
                    ).appendTo(_options.tabContainer);
            };

            // Activates the tab for the passed pallet id. Creates a new tab if necessary
            var show = function (palletId) {
                var x = $('> li[' + _options.attrPalletId + '="' + palletId + '"] > a', _options.tabContainer).tab('show');
                if (x.length > 0) {
                    // We were able to activate the pallet
                    return;
                }
                // No such pallet. Create a new tab at the end of the tabs and make it active
                Tabs.create(palletId).find('a').tab('show');
            };

            // Updates the content html of the active tab
            var html = function (html) {
                var $pane = $('div.active.tab-pane', _options.contentContainer);
                $pane.html(html);
            };

            // Updates the html of active pallet
            var load = function () {
                Tabs.html('Loading...');
                return $.get(_options.loadUrl.replace('~', Tabs.activePalletId())).then(function (data, textStatus, jqXHR) {
                    Tabs.html(data);
                    //alert(this.palletId + '*' + data);
                }, function (jqXHR, textStatus, errorThrown) {
                    //alert(textStatus);
                    Tabs.html(jqXHR.responseText);
                });
            };
            return {
                init: init,
                create: create,
                load: load,
                activePalletId: activePalletId,
                html: html,
                show: show
            };
        })();

        // Monitors the enter key in the text area. When pressed, it starts a timer and acts on the user scans
        // Errors are displayed in an associated popover
        var HandleScan = (function() {
            var _timer;

            var _options = {
                // Selector to the text area
                textarea: '', //'#scanArea textarea',
                // Selector of a button which will cause immediate handling of the scans.
                // It should have an ajax loading image which will be made visible while ajax calls are in progress
                button: '', //'#scanArea button',
                // URL to invoke for receiving cartons
                cartonUrl: $('#tbScan').data('carton-url'),
                // This function is passed the pallet id and the cartons to receive. It should return a a name value array containing all parameters needed
                // by the function which will receive cartons
                cartonPostdata: function(palletId, cartons) {
                    // This is an example function. Not useful. Caller must pass it to init
                    var $form = $('#scanArea');
                    return [
                        { name: 'processId', value: _processId },
                        { name: 'cartons', value: cartons },
                        { name: 'palletId', value: palletId },
                        { name: 'dispos', value: 'something' }
                    ];
                },
                delay: 3000   // Number of milliseconds delay after enter is pressed
            };

            var init = function(options) {
                _options = $.extend(_options, options);
                $(_options.textarea).on('keypress', function (e) {
                    if (_timer) {
                        clearTimeout(_timer);
                        _timer = null;
                    }
                    if (e.which != 13) {
                        // We are interested only when enter key is pressed
                        return;
                    }
                    Sound.success();
                    setTimeout(function() {
                        _act();  // Calling our private function
                    }, _options.delay);
                }).popover({
                    trigger: 'manual',
                    html: true,
                    title: '<strong class="text-danger"><span class="text-danger glyphicon glyphicon-warning-sign"></span> Error Message</strong><a class="close text-danger" href="#">&times;</a>',
                    placement: 'auto',
                    container: 'body'
                });

                // Hide the popover when the X in the title is clicked
                $(document).on('click', '.close', function (e) {
                    //hiding the error message popover and at the same doing empty textarea with focus.
                    $(_options.textarea).popover('hide').focus();
                });

                $(_options.button).on('click', 'has(span:visible)', function (e) {
                    // The click is accepted only if the Go text is visible on the button.
                    // This means to us that ajax call is not in progress.
                    _act();
                });
            };

            // Called to immediately act on the text in text area
            var _act = function() {
                // Clear the timer
                if (_timer) {
                    clearTimeout(_timer);
                    _timer = null;
                }
                var tokens = $.grep($(_options.textarea).val().split('\n'), function (txt, i) {
                    // Ignore empty lines
                    return txt.trim().toUpperCase() != '';
                });
                if (tokens.length == 0) {
                    // Text box is empty. Nothing to do
                    return;
                }

                var def = $.Deferred(function () {
                    //alert('Show Ajax');
                    $(_options.button).find('img').removeClass('hidden')
                        .end().find('span').addClass('hidden');
                });
                var chain = def;
                var lastscan = tokens[tokens.length - 1];

                if (lastscan.toUpperCase().indexOf('P') === 0) {
                    // First process the cartons before this pallet
                    if (tokens.length > 1) {
                        // Some cartons were scanned before this pallet
                        chain = chain.then(_receiveCartons.bind(undefined, tokens.slice(0, tokens.length - 1)));
                    }
                    chain = chain.then(_changePallet.bind(undefined, lastscan));
                } else {
                    chain = chain.then(_receiveCartons.bind(undefined, tokens));
                }
                chain = chain.always(function () {
                    //alert('Hide Ajax');
                    $(_options.button).find('img').addClass('hidden')
                        .end().find('span').removeClass('hidden');
                });
                chain.done(function() {
                    $(this.tb).val('').focus();
                }.bind({tb: _options.textarea}));
                def.resolve();  // Initiate the function chain
            };

            // Returns ajax object so that we can chain functions to be executed after ajax call is complete
            // Should be private
            var _receiveCartons = function (cartons) {
                return $.post(_options.cartonUrl, _options.cartonPostdata(Tabs.activePalletId(), cartons)).then(function (data, textStatus, jqXHR) {
                    // Success
                    Tabs.html(data);
                    Progress.update(this.count);
                }.bind({
                    count: cartons.length
                }), DisplayAjaxError);
            };

            // Expects this.palletId
            // Returns ajax object to enable further chaining
            // Should be private
            var _changePallet = function (palletId) {
                Tabs.show(palletId);
            };

            var DisplayAjaxError = function (jqXHR, textStatus, errorThrown) {
                //PlayErrorSound();
                Sound.error();
                var $tb = $(_options.textarea);
                switch (jqXHR.status) {
                    case 500:
                        // Some exception thrown by action
                        $tb.attr('data-content', jqXHR.responseText);
                        break;

                    default:
                        // Action was not found
                        $tb.attr({
                            'data-content': 'Error ' + jqXHR.status + ': ' + errorThrown
                        });
                        break;
                }
                $tb.popover('show');
            };
            return {
                init: init
            };
        })();


        $(document).ready(function () {
            $('#btnNewPallet').click(function (e) {
                alert('auto increment tab with pallet id');
            });

            // Close pallet tab when close icon is clicked
            $('#palletTabs').on('click', '.glyphicon-remove-sign', function (e) {
                var $li = $(this).closest('li');
                if ($li.is('.active')) {
                    // If the visible tab is being removed, first make something else visible
                    // Try to show the next tab
                    var $nextli = $li.next();
                    if ($nextli.length == 0) {
                        // If no next, then show first
                        $nextli = $('li:first', e.delegateTarget);
                    }
                    $('a', $nextli).tab('show');
                }
                // Remove content first
                var contentSelector = $('a', $li).attr('href');  // e.g. #tab2
                $(contentSelector).remove();
                // Now remove tab
                $li.remove();

            }).on('shown.bs.tab', function (e) {
                //alert('shown.bs.tab ' + e.relatedTarget);
                Tabs.load();
            }).find('li:first a').tab('show');

        });



        // Remove carton from pallet
        $(document).ready(function () {
            var $dlg = $('#removeModal');
            $('#palletTabContent').on('click', 'div.active [data-action="remove"]', function (e) {
                // Print button in the partial view clicked. Show print dialog. Also pupulate carton and pallet within the modal
                $('span.cartonId', this).text($(e.target).closest('[data-carton]').data('carton'));
                $('span.palletId', this).text(Tabs.activePalletId());
                $('span.count', this).text($(e.target).closest('div.tab-pane').find('[data-carton]').length);
                $dlg.modal('show');
            }.bind($dlg));

            // Supply carton id to modals before they open
            $dlg.on('click', '#btnRemove', function (e) {
                //remove the carton from pallet.
                // The text of all spans with data-name attribute will be posted
                var data = new Object();
                $('span[data-name]', e.delegateTarget).each(function () {
                    data[$(this).attr('data-name')] = $(this).text();
                });
                $.post($(this).data('url'), data)
                    .then(function (data, textStatus, jqXHR) {
                        $(this.dlg).modal('hide');
                        Tabs.html(data);
                        Progress.update(-1);
                    }.bind({
                        dlg: e.delegateTarget
                    }), function (jqXHR, textStatus, errorThrown) {
                        Sound.error();
                        alert('Error: ' + jqXHR.responseText);
                    });
            });
        });

        // Print carton label
        $(document).ready(function () {

            $('#palletTabContent').on('click', '[data-action="print"]', function (e) {
                // Print button in the partial view clicked. Show print dialog
                $('#printModal')
                    .find('span.cartonId')
                    .text($(this).closest('[data-carton]').data('carton'))
                    .end()
                    .find('.alert')
                    .addClass('hidden')
                    .removeClass(function (index, css) {
                        // Remove alert-* classes from the alert. The appropriate class will be added later
                        return (css.match(/(^|\s)alert-\S+/g) || []).join(' ');
                    }).end()
                    .modal('show');
            });

            $('#printModal').one('show.bs.modal', function (e) {
                // Populate the printer drop down when shown first time
                var $ddlPrinters = $('#ddlprinters');
                $.get($ddlPrinters.data('getprinters-url'))
                    .then(function (printers, textStatus, jqXHR) {
                        // Success. We have got the list of printers
                        //var selected = jqXHR.getResponseHeader("Selected");
                        $.each(printers, function (i, printer) {
                            var x = $('<option></option>').val(printer.Name).text(printer.Name + ' : ' + printer.Description);
                            if (printer.Name === this.selected) {
                                x.attr('selected', 'selected');
                            }
                            this.ddl.append(x);
                        }.bind({
                            ddl: this.ddl,
                            selected: jqXHR.getResponseHeader("Selected")
                        }));
                    }.bind({
                        ddl: $ddlPrinters
                    }), function (jqXHR, textStatus, errorThrown) {
                        // Some error
                        var x = $('<option></option>').val('')
                            .html('<span class="bg-danger">Could not retrieve printer list: ' + textStatus + ' ' + jqXHR.status + '</span>');
                        this.append(x);
                    }.bind(this));
            }).on('click', '#btnPrint', function (e) {
                // Print the carton label
                // Remove alert-* classes from the alert. The appropriate class will be added later
                var $alert = $(".alert", e.delegateTarget).removeClass('hidden');
                var $ddl = $('#ddlprinters', e.delegateTarget);
                if (!$ddl.val()) {
                    $alert.text("Please select a printer").addClass('alert-warning');
                    return;
                }
                var data = new Object();
                $('span[data-name]', e.delegateTarget).each(function (index, elem) {
                    this[$(elem).attr('data-name')] = $(elem).text();
                }.bind(data));
                data[$ddl.attr('name')] = $ddl.val();
                $.post($(this).attr('data-print-url'), data)
                    .then(function (data, textStatus, jqXHR) {
                        // success
                        this.html(data);
                        switch (jqXHR.status) {
                            case 203:
                                this.addClass('alert-warning');
                                break;

                            default:
                                this.addClass('alert-success');
                                break;
                        }
                    }.bind($alert), function (jqXHR, textStatus, errorThrown) {
                        // Error
                        this.addClass('alert-danger').html(jqXHR.responseText);
                    }.bind($alert));
            });

        });


        $(document).ready(function() {
            Sound.init({
                // Selector to error sound audio element
                error: '#soundError',
                // Selector to success sound audio element
                success: '#soundSuccess'
            });

            Tabs.init({
                // Selector for tab container
                tabContainer: '#palletTabs',
                // Selector to container containing tab content
                contentContainer: '#palletTabContent',
                // Name of the attribute of LI containing pallet id
                attrPalletId: 'data-palletid',
                // The URL which is responsible for returning pallet html
                // The URL should contain a placeholder ~ which will be replaced by the pallet id
                loadUrl: '@Html.Raw(Url.Action(MVC_Receiving.Receiving.Home.GetPalletHtml("~", Model.ProcessId)))',
                pallets:  @Html.Raw(Model.PalletIdListJson)
                });

            HandleScan.init({
                // Selector to the text area
                textarea: '#scanArea textarea',
                // Selector of a button which will cause immediate handling of the scans.
                // It should have an ajax loading image which will be made visible while ajax calls are in progress
                button: '#scanArea button',
                // URL to invoke for receiving cartons
                cartonUrl: $('#tbScan').data('carton-url'),
                // This function is passed the pallet id and the cartons to receive. It should return a a name value array containing all parameters needed
                // by the function which will receive cartons
                cartonPostdata: function(palletId, cartons) {
                    var $form = $('#scanArea');
                    return [
                        { name: $form.data('name-processid'), value: _processId },
                        { name: $('textarea', $form).attr('name'), value: cartons },
                        { name: $form.data('name-palletid'), value: palletId },
                        { name: $form.data('name-dispos'), value: $('#palletTabContent .tab-pane.active [data-disposition]').data('disposition') }
                    ];
                },
                delay: 3000   // Number of milliseconds delay after enter is pressed
            });
        });

    </script>
}


