@using DcmsMobile.Receiving.ViewModels.Rad;
@model RadViewModel
@{
    ViewBag.Title = "Receiving Configuration";
}
<div class="container">
    <div class="page-header">
        <h2>Receiving Configuration</h2>
        <small class="text-info h6">
            <span class="glyphicon glyphicon-info-sign" style="display: inline-block"></span>
            Disabled configuration settings will not be honored during receiving.
        </small>
    </div>
    @if (Model.SpotCheckAreaList.Count != 0)
    {
        <div class="well well-sm">
            Available Spot Check Areas
            (<span class="h4 text-success">
                Building:
            </span>
            Area)

            @for (int i = 0; i < Model.SpotCheckAreaList.Count(); i++)
            {
                if (i == 0 || Model.SpotCheckAreaList[i].BuildingId != Model.SpotCheckAreaList[i - 1].BuildingId)
                {
                    <span class="h4 text-success">
                        &nbsp;
                        @Html.DisplayFor(m => m.SpotCheckAreaList[i].BuildingId):
                    </span>
                }
                @Html.DisplayFor(m => m.SpotCheckAreaList[i].AreaId)@:&nbsp;

            }
        </div>
    }
    else
    {
        <div class="alert alert-info">No Spot Check Areas defined</div>
    }



    <div>
        <!--Enable with role ROLE_RAD_EDITING (username= jeewan ; password= 1234567890)-->
        @if (!Model.EnableEditing)
        {
            <button class="btn btn-primary pull-right" data-toggle="modal" data-target="#btnAddSpotCheck">
                Add Spot Check...
            </button>
        }
        <div id="divSpotCheckList">
            @Html.Partial(MVC_Receiving.Receiving.Rad.Views._spotCheckListPartial, Model.SpotCheckList)
        </div>
    </div>


    <!-- Modal for edit spot check button in partial page _spotCheckListPartial.cshtml-->
    <div class="modal fade" id="btnEditSpotCheck" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title" id="myModalLabel">Edit Spot Check</h4>
                </div>

                @Html.Partial(MVC_Receiving.Receiving.Rad.Views._editSpotCheckPartial, new SpotCheckViewModel())

            </div>
        </div>
    </div>

    <!-- Modal for add spot check Percentage button in partial page _spotCheckListPartial.cshtml-->
    <div class="modal fade" id="btnAddSpotCheck" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title">Add Spot Check</h4>
                </div>
                @Html.Partial(MVC_Receiving.Receiving.Rad.Views._addSpotCheckPartial, new SpotCheckViewModel
{
    SewingPlantList = Model.SpotCheckViewModel.SewingPlantList
})

            </div>
        </div>
    </div>
</div>


@section script {
    <link href="~/Content/typeahead.css" type="text/css" rel="stylesheet" />
    <script src="@Links_Receiving.Areas.Receiving.SharedViews.bootstrap3_typeahead_js" type="text/javascript"></script>

    <!-- Need for post the values from _spotCheckListpartial.cshtml page to _editSpotCheckPartial.cshtml -->
    @*<script src="@Links_Receiving.Scripts.jquery_validate_js" type="text/javascript"></script>*@
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
    <script src="~/Scripts/typeahead.bundle.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.bootstrap.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {

            // Handle change event of radio button for All styles and AllColors.
            // Initialize value for radio button based on checked state.Also initialize value for style autocomplete.
            // Id of textbox for style,color and value for data-attr-disabletb must be same.
            $('#rbAllStyle,#rbAllColors').change(function (e) {
                var checked = $(this).is(':checked');
                var tb = $(this).attr('data-attr-disabletb')
                if (checked) {
                    $(this).val(true);
                    $('#' + tb).prop('disabled', checked).val("All");
                }
                else {
                    $(this).val(false)
                    $('#' + tb).prop('disabled', checked).val("");
                }
            });

            // Hanlde change event of radio button for specific style and color
            // Id of textbox for style,color and value of data-attr-enabletb must be same.
            $('#rbSpecificStyle,#rbSpecificColor').change(function (e) {
                var checked = $(this).is(':checked');               
                var tb = $(this).attr('data-attr-enabletb')               
                if (checked) {
                    $('#' + tb).prop('disabled', !checked).val("");
                }
                else {
                    $('#' + tb).prop('disabled', !checked).val("");
                }
            });


            // Handle change event of checkfor enable/disbale SpotCheck
            // Initialize value for check box based on checked state in _editSpotCheckPartial page.
            $('#cbEditIsSpotCheckEnable').change(function (e) {
                $(this).val($(this).is(':checked'));
            });

         

            $('#addSpotCheck').on('click', 'button:not([data-dismiss])', function (e) {
                $.ajax({
                    url: '@Url.Action(MVC_Receiving.Receiving.Rad.SetSpotCheckPercentage())',
                    type: 'POST',
                    context: this,
                    data: $('#addSpotCheck').serializeArray(),
                    statusCode: {
                        // Success
                        200: function (data, textStatus, jqXHR) {
                            //updating the list with updated data
                            $('#divSpotCheckList').html(data);
                            $('#btnAddSpotCheck').modal('hide');
                        },
                        // Error
                        203: function (data, textStatus, jqXHR) {
                            //alert(data);
                            $('div.text-danger', $('#addSpotCheck')).html(jqXHR.responseText);
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert(jqXHR.responseText);
                    }
                });
                return false;
            });

           




            $('#divSpotCheckList').click(function (e) {
                var $tr = $(e.target).closest('tr');
                var $th = $(e.target).closest('table').find('thead > tr > th');
                if ($(e.target).find('span').attr('class') == "glyphicon glyphicon-edit") {
                    var $dlg = $(this).find($(e.target)).attr('data-target');
                    $tr.find('td').each(function (index) {
                        //Binding all the values of span on the dialog box
                        // Populate the visible spans
                        var name = $th.eq(index).attr('data-name');
                        if (name) {
                            var selector = $.validator.format("span[data-name='{0}']", name);
                            $(selector, $dlg).html($(this).html());
                            // Populate the hidden fields
                            selector = $.validator.format("input[name='{0}']", name);
                            var inputType = $(selector, $dlg).attr('type');
                            if (inputType == 'checkbox') {
                                var val = $(this).attr('data-val');
                                if (val == "True") {
                                    $(selector, $dlg).prop('checked', 'checked');
                                }
                                else {
                                    $(selector, $dlg).removeAttr('checked', 'checked')
                                }
                            }
                            $(selector, $dlg).val($(this).attr('data-val'));
                        }
                    });
                }
                else if ($(e.target).find('span').attr('class') == "glyphicon glyphicon-remove") {
                    var dialogData = new Object();
                    var msg = $(e.target).find('span').attr('title') + ' for ';
                    //Collecting details for Delete
                    $(e.target).closest('tr').find('td').each(function (index) {
                        var name = $th.eq(index).attr('data-name');
                        if (name) {
                            dialogData[name] = $(this).attr('data-val');
                        }
                        var displayName = $th.eq(index).attr('data-display-name');
                        if (displayName) {
                            msg += $.validator.format("{0} : {1}; ", displayName, $(this).html());
                        }
                    });
                    var result = confirm(msg);
                    if (result) {
                        $.ajax($(e.target).attr('data-delete-ajax-url'), {
                            type: 'POST',
                            context: this,
                            data: dialogData,
                            success: function (data, textStatus, jqXHR) {
                                //updating the list with updated data
                                $(this).html(data);
                                // handling validation error
                                if (jqXHR.status == 203) {
                                    alert(jqXHR.responseText);
                                    return;
                                }
                            }
                        }).error(function (jqXHR, textStatus, errorThrown) {
                            alert(jqXHR.responseText);
                        });
                    }
                }

            });

            //auto-complete for the _addspotCheckPartial Page.
            $('input[data-url-list]').typeahead({
                source: function (query, cb) {
                    $.ajax({
                        url: this.$element.attr("data-url-list"),
                        context: this.$element,
                        data: {
                            term: query
                        }
                    }).then(function (response) {
                        // Extract the label from each result in the array.
                        // Store the value in a global map
                        var x = $.map(response, function (val, i) {
                            return val.label;
                        });
                        cb(x);
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        alert("error" + jqXHR.responseText);
                    });
                },
                matcher: function (item) {
                    return true;
                }

            });

        });
    </script>
}



