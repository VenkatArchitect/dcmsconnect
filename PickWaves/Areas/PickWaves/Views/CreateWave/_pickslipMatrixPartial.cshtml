@*Displays the pickslip matrix based on the passed dimension. User has the option of changing the passed dimension and it auto refreshes itself via Ajax

    Model.SelectedDimension is displayed as a drop down. If you choose to place this partial in a form, this value will get posted.

    Check state of hidden Radio buttons for Model.SelectedDc and Model.DimensionValue is updated when a cell is clicked. The clicked cell will have the class ui-state-highlight applied to it.

    All selectable cells have class ui-selectable applied.

*@

@model DcmsMobile.PickWaves.ViewModels.CreateWave.PickslipMatrixPartialViewModel
<div class="matrixOuter">
    @Html.HiddenFor(m => m.CustomerId)
    <table>
        <caption>
            Pickslip Counts for customer @Html.DisplayFor(m => m.CustomerId)
        </caption>
        <thead>
            <tr>
                <th colspan="@(Model.ColDimensionValues.Count+3)" style="text-align: left; padding-left : 26em;">
                    @Html.LabelFor(m => m.VwhId) @Html.DropDownListFor(m => m.VwhId, Model.VwhList)
                </th>
            </tr>
            <tr>
                <th rowspan="2">
                    #
                </th>
                <th rowspan="2">
                    <select name="@Model.NameFor(m => m.RowDimIndex)">
                        @foreach (var item in Model.DimensionList)
                        {
                            <option value="@item.Value" @Html.Raw(item.Value == Model.RowDimIndex.ToString() ? "selected=\"selected\"" : "")
                                    @Html.Raw(string.IsNullOrEmpty(item.Value) ? @"disabled=""disabled"" title=""This option is disabled because there are too many unique " + item.Text + "\"" : "")>
                                @item.Text
                            </option>
                        }
                    </select>
                </th>
                <th colspan="@Model.ColDimensionValues.Count" style="text-align:left">
                    <select name="@Model.NameFor(m => m.ColDimIndex)">
                        @foreach (var item in Model.DimensionList)
                        {
                            <option value="@item.Value" @Html.Raw(item.Value == Model.ColDimIndex.ToString() ? "selected=\"selected\"" : "")
                                    @Html.Raw(string.IsNullOrEmpty(item.Value) ? @"disabled=""disabled"" title=""This option is disabled because there are too many unique " + item.Text + "\"" : "")>
                                @item.Text
                            </option>
                        }
                    </select>
                </th>
                <th rowspan="2" class="ui-state-active">
                    Total
                </th>
            </tr>
            <tr class="dc-header">
                @for (var i = 0; i < Model.ColDimensionValues.Count; ++i)
                {
                    <th>
                        @Html.RadioButtonFor(m => m.ColDimVal, Model.ColDimensionValues[i], new
                   {
                       id = "col_" + i.ToString(),
                       //@checked = i == 0 ? "checked" : ""
                   })
                        <label for="@Html.Raw("col_" + i.ToString())">
                            @Model.ColDimensionValues[i]
                        </label>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @for (var j = 0; j < Model.RowDimensions.Count; ++j)
            {
                <tr class="@(j % 2 == 0 ? "rowA" : "rowB")">
                    <td style="text-align: right">
                        @(j + 1)
                    </td>
                    <td>
                        @Html.RadioButtonFor(m => m.RowDimVal, Model.RowDimensions[j].DimensionValue, new
                   {
                       id = "row_" + j.ToString(),
                       //@checked = j == 0 ? "checked" : ""
                   })
                        <label for="@Html.Raw("row_" + j.ToString())">
                            @Model.RowDimensions[j].DimensionDisplayValue
                        </label>
                    </td>
                    @foreach (var item in Model.ColDimensionValues)
                    {
                        if (Model.RowDimensions[j].Data.ContainsKey(item))
                        {
                            <td style="text-align: right" tabindex="0" class="ui-selectable">
                                @string.Format("{0:N0}", Model.RowDimensions[j].Data[item])
                            </td>
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                    <td style="text-align: right;" class="ui-state-active">
                        @Html.DisplayFor(m => m.RowDimensions[j].TotalPickslips)

                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr class="ui-state-active">
                <td colspan="2" style="font-weight: bold;">
                    Total
                </td>
                @foreach (var dc in Model.ColDimensionValues)
                {
                    <td style="text-align: right">
                        @string.Format("{0:N0}", Model.GetPickslipCount(dc))
                    </td>
                }
                <td style="text-align: right; font-weight: bold; font-size: 1.2em">
                    @Html.DisplayFor(m => m.GrandTotalPickslips)
                </td>
            </tr>
        </tfoot>
    </table>
</div>
