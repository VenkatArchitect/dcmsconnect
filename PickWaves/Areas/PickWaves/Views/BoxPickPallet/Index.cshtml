@model DcmsMobile.PickWaves.ViewModels.BoxPickPallet.BoxPickPalletViewModel
@{
    ViewBag.Title = string.Format("Expedite Box Picking for Pick Wave {0}", Model.BucketId);
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}

<div class="box">
    <div class="boxContent">
        @using (Html.BeginForm(MVC_PickWaves.PickWaves.BoxPickPallet.Index(), FormMethod.Get))
        {
            @Html.LabelFor(m => m.BucketName) 
            @Html.TextBoxFor(m => m.BucketId, new
                {
                    size = 5,
                    maxlength = 5,
                })
            <button type="submit">Go</button> 
            <a href="@Url.Action(MVC_PickWaves.PickWaves.BoxPickPallet.Index())">Auto Select Pick Wave</a>
        }
        <br />
        @if (Model.UserIsManager && !Model.IsFrozen)
        {
            if (Model.ExpeditedBoxCount < Model.TotalBoxes)
            {
                <span> @string.Format("{0} boxes need to be expedited.", Model.TotalBoxes - Model.ExpeditedBoxCount)</span>
                <button id="btnNonExpeditedBox" @(Model.ExpeditedBoxCount < Model.TotalBoxes ? "" : "disabled=\"disabled\"")>
                    Create Pallet..</button>
            }
            else
            {
                <span>All Boxes have been expedited.</span>
            }
        }
    </div>

    @if (Model.BucketId != null)
    {
        <div class="boxContent">
            <h3>
                <span style="color: Gray">@Html.LabelFor(m => m.CustomerName) </span>@Html.DisplayFor(m => m.CustomerId) : @Html.DisplayFor(m => m.CustomerName)
            </h3>
            <h3>
                <span style="color: Gray">@Html.LabelFor(m => m.BucketName)</span> @Html.DisplayFor(m => m.BucketId) : @Html.DisplayFor(m => m.BucketName)
            </h3>
            <h3>
                @if (Model.PullBuildingId == Model.PitchBuildingId)
                {
                    <span style="color: Gray">Pull & Pitch from </span>@Html.DisplayFor(m => m.PullBuildingId)
                }
                else
                {
                    if (!string.IsNullOrEmpty(Model.PullBuildingId))
                    {
                        <span style="color: Gray">@Html.LabelFor(m => m.PullBuildingId) </span>
                        @Html.DisplayFor(m => m.PullBuildingId)
                    }
                    if (!string.IsNullOrEmpty(Model.PitchBuildingId))
                    {
                        <span style="color: Gray">@Html.LabelFor(m => m.PitchBuildingId) </span>
                        @Html.DisplayFor(m => m.PitchBuildingId)
                    }
                }
            </h3>
            @if (Model.IsFrozen)
            {
                <span class="ui-state-highlight">This Pick Wave is frozen</span>
            }
            <br />
            Expedited Boxes:
            <div class="ui-progressbar ui-widget ui-widget-content ui-corner-all" style="width: 40em; height: 1.5em; display: inline-block">
                <div style="width: @Model.PercentExpedited%; color:Black" class="ui-progressbar-value ui-widget-header ui-corner-left ui-state-active">
                    <div style="color: Black; white-space: nowrap; margin-left: 0.5em; margin-top: 1mm">
                        @string.Format("{0:N0} of {1:N0} boxes", Model.ExpeditedBoxCount, Model.TotalBoxes)
                    </div>
                </div>
            </div>
            <div style="padding-top: 1em">
                @if (Model.PalletList.Any())
                {
                    <table id="tblPallets">
                        <caption>
                            Pallet Limit is @Model.PalletLimit boxes
                        </caption>
                        <thead>
                            <tr>
                                <th>#
                                </th>
                                <th>Pallet
                                </th>
                                <th>Picked
                                </th>
                                <th>Printed on
                                </th>
                                <th>Box Picking Progress
                                </th>
                                @if (Model.UserIsManager)
                                {
                                    <th>Actions
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @for (var j = 0; j < Model.PalletList.Count; j++)
                            {
                                <tr class="@(j % 2 == 0 ? "rowA" : "rowB")">
                                    <td>
                                        @(j + 1)
                                    </td>
                                    <td>
                                        <a href='@Url.Content(string.Format("~/Inquiry/BoxPallet/{0}", Model.PalletList[j].PalletId))' target ="printSpecificUcc" class = "data-palletId">
                                            @Html.DisplayFor(m => m.PalletList[j].PalletId)</a>
                                    </td>
                                    <td>
                                        @Html.DisplayFor(m => m.PalletList[j].IaChangeDate)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(m => m.PalletList[j].PrintDate)
                                    </td>
                                    <td style="text-align: right" title="@Model.PalletList[j].PercentPickedBoxes % Boxes Picked">
                                        <div class="ui-progressbar ui-widget ui-widget-content ui-corner-all" style="height: 1.5em;">
                                            <div style="width: @Model.PalletList[j].PercentPickedBoxes%" class="ui-progressbar-value ui-widget-header ui-corner-left">
                                                <div style="color: Black; white-space: nowrap; font-size: 0.9em; margin-top: 0.5mm;">
                                                    @if (Model.PalletList[j].PickedBoxes < Model.PalletList[j].TotalBoxesOnPallet)
                                                    {
                                                        <text>
                                                            @Html.DisplayFor(m => m.PalletList[j].PickedBoxes) of @Html.DisplayFor(m => m.PalletList[j].TotalBoxesOnPallet) boxes picked
                                                        </text>
                                                    }
                                                    else
                                                    {
                                                        <text>
                                                            All @Html.DisplayFor(m => m.PalletList[j].TotalBoxesOnPallet) boxes picked
                                                        </text>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                    @if (Model.UserIsManager)
                                    {
                                        <td>
                                            <a class="ui-icon ui-icon-print ui-state-highlight" title="Click to print the pallet" href='@Url.Content(string.Format("~/Inquiry/BoxPallet/{0}?showPrintDialog={1}", Model.PalletList[j].PalletId, "True"))' target= "printPallet"
                                               style = "display: inline-block;" data-total-boxes="@Model.PalletList[j].TotalBoxesOnPallet"></a>
                                            @if (!Model.IsFrozen)
                                            {
                                                if (Model.PalletList[j].PickedBoxes < Model.PalletList[j].TotalBoxesOnPallet)
                                                {
                                                    using (Html.BeginForm(MVC_PickWaves.PickWaves.BoxPickPallet.RemoveUnPickedBoxesFromPallet(), FormMethod.Post, new { style = "display:inline-block" }))
                                                    {
                                                        <input type="hidden" name="@Model.NameFor(m => m.BucketId)" value="@Model.BucketId" />
                                                        <input type="hidden" name="@Model.NameFor(m => m.PalletId)" value="@Model.PalletList[j].PalletId" />
                                                        <button type="submit" class="btnRemoveUnpickedBoxes" title="Remove non physical boxes from the pallet" data-unpicked-boxes="@(Model.PalletList[j].TotalBoxesOnPallet - Model.PalletList[j].PickedBoxes)" data-icon="ui-icon-minus">
                                                            X
                                                        </button>
                                                    }
                                                }
                                                else
                                                {
                                                    <button type="button" disabled="disabled" title="Disabled because all boxes have been picked" data-icon="ui-icon-minus">
                                                        X
                                                    </button>
                                                }
                                                if (Model.ExpeditedBoxCount < Model.TotalBoxes)
                                                {
                                                    <button type="submit" class="btnExpediteBoxes" title="Expedite the remaining boxes" data-icon="ui-icon-plus">
                                                        X
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button type="button" disabled="disabled" title="Disabled because all boxes have been expedited" data-icon="ui-icon-plus">
                                                        X
                                                    </button>
                                                }
                                            }
                                            else
                                            {
                                                <button type="button" disabled="disabled" title="Disabled because all boxes have been picked" data-icon="ui-icon-minus">
                                                    X
                                                </button>
                                                <button type="button" disabled="disabled" title="Disabled because all boxes have been expedited" data-icon="ui-icon-plus">
                                                    X
                                                </button>
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    }
</div>
<div>
</div>
<div id="divCreateDialog">
    @using (Html.BeginForm(MVC_PickWaves.PickWaves.BoxPickPallet.CreatePallet(), FormMethod.Post, new
    {
        id = "frmCreate"
    }))
    {
        <div id="divInfo" class="ui-state-highlight" style="margin-bottom: 1em;">
            To keep more boxes on this pallet, please enter new pallet limit.
        </div>
        @Html.HiddenFor(m => m.BucketId)
        @Html.LabelFor(m => m.PalletId) 
        @Html.TextBoxFor(m => m.PalletId, new { style = "text-transform: uppercase", id = "tbPalletId" })<span>*</span>
        @Html.ValidationMessageFor(m => m.PalletId)
        <br />
        @:Pallet Limit
        @Html.TextBoxFor(m => m.PalletLimit, new { size = 5 })<span>*</span>
        @Html.ValidationMessageFor(m => m.PalletLimit)
    }
</div>
@section scripts{
    <script src="@Links_PickWaves.Scripts.jquery_validate_js" type="text/javascript"></script>
    <script src="@Links_PickWaves.Scripts.jquery_validate_unobtrusive_js" type="text/javascript"></script>
    <script src="@Links_PickWaves.Areas.PickWaves.Scripts.BoxPickPalletIndex_all_js" type="text/javascript"></script>
}
