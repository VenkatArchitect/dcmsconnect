@model DcmsMobile.PickWaves.ViewModels.Home.IndexViewModel
@{
    ViewBag.Title = "Pick Waves Home";
}
@if (Model != null && Model.IsFilterApplied)
{
    if (!string.IsNullOrEmpty(Model.ImportedOrders.Single().CustomerId))
    {
        <h2>Showing PickWave of customer @Model.ImportedOrders.Single().CustomerId @Html.ActionLink("Show all", MVC_PickWaves.PickWaves.Home.Index()) </h2>
    }  
}
@helper TabDescription(DcmsMobile.PickWaves.Helpers.ProgressStage state)
{
    switch (state)
    {
        case DcmsMobile.PickWaves.Helpers.ProgressStage.Frozen:
            <p class="ui-state-disabled">
                Picking will not be performed on these pick waves. You will need to unfreeze them first.
            </p>
            break;

        case DcmsMobile.PickWaves.Helpers.ProgressStage.InProgress:
        <p>
            Check the picking progress using the progress bars displayed in the table. Go to the <em>Pick Wave List</em> of a customer to manage individual pick waves.
        </p>
            break;

        case DcmsMobile.PickWaves.Helpers.ProgressStage.Completed:
        <p>
            Picking for these pick waves has been completed. Hopefully, the progress bar is telling you that you did not have to undership anything.
        </p>
            break;

        default:
        <p>Internal Error. We are not sure what you are seeing</p>
            break;
    }
}

<div class="box">
    <div id="divTabs">
        <ul>
            @if (Model.ImportedOrders.Count > 0)
            {
                <li>
                    <a href="#ToCreate">
                        To Create
                        <span style="margin: 0.5mm 0 0.5mm 1mm; padding: 0.5mm 1.5mm 0.5mm 1.5mm;" class="ui-corner-all ui-state-error" title="@Model.ImportedOrders.Count customers">
                            @Model.ImportedOrders.Count
                        </span>
                    </a>
                </li>
            }
            @for (var i = 0; i < Model.BucketsByStatus.Count; ++i)
            {
                <li>
                    <a href="#@Model.BucketsByStatus.Keys[i].ToString()">
                        @Model.StateDisplayNames[Model.BucketsByStatus.Keys[i]]
                        <span style="margin: 0.5mm 0 0.5mm 1mm; padding: 0.5mm 1.5mm 0.5mm 1.5mm;" class="ui-corner-all ui-state-error" title="@Model.BucketsByStatus.Values[i].Count customers">
                            @Model.BucketsByStatus.Values[i].Count
                        </span>
                    </a>
                </li>
            }
        </ul>
        @if (Model.ImportedOrders.Count > 0)
        {
            <div id="ToCreate">
                <blockquote>
                    You can create new pick waves from here by simply clicking the customer Id.
                </blockquote>
                <table>
                    <caption>
                        Imported Order Summary
                    </caption>
                    <thead>
                        <tr>
                            <th rowspan="2">
                                #
                            </th>
                            <th colspan="2">
                                Customer
                            </th>
                            <th rowspan="2">
                                # Pickslips
                            </th>
                            <th rowspan="2" title="Earliest DC cancel date [MM/DD] to Latest DC cancel date [MM/DD/YYYY]">
                                DC Cancel
                                <span class="ui-icon ui-icon-triangle-1-n" style="display: inline-block"></span>
                            </th>
                            <th colspan="2">
                                Ordered
                            </th>
                            <th rowspan="2" title="Earliest Pickslip import date [MM/DD] to Latest Pickslip import date [MM/DD/YYYY]">
                                Imported on
                            </th>
                        </tr>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>
                                $
                            </th>
                            <th>
                                Pieces
                            </th>
                        </tr>
                        <tr class="ui-state-active">
                            <th colspan="2">Summary</th>
                            <th>@Model.ImportedOrders.Count customers</th>
                            <th>@Html.DisplayFor(m => m.TotalImportedPickslipCount)</th>
                            <th>@Html.DisplayFor(m => m.DcCancelDateRange)</th>
                            <th>@Html.DisplayFor(m => m.TotalImportedDollarsOrdered)</th>
                            <th>@Html.DisplayFor(m => m.TotalImportedPiecesOrdered)</th>
                            <th>@Html.DisplayFor(m => m.ImportDateRange)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < Model.ImportedOrders.Count; ++i)
                        {
                            <tr class="@(i % 2 == 0 ? "rowA" : "rowB")">
                                <td style="text-align: right">@(i + 1)</td>
                                <td>
                                    @if (Model.UserIsManager)
                                    {
                                        <ul class="customerActionMenu">
                                            <li>
                                                <a href="@Url.Action(MVC_PickWaves.PickWaves.CreateWave.Index(new DcmsMobile.PickWaves.ViewModels.CreateWave.IndexViewModel(Model.ImportedOrders[i].CustomerId)))" title="@string.Format("Create Pick Waves for {0}", Model.ImportedOrders[i].CustomerName)">
                                                    <span class="ui-icon ui-icon-plus"></span>
                                                    @Html.DisplayFor(m => m.ImportedOrders[i].CustomerId)
                                                </a>
                                            </li>
                                        </ul>
                                    }
                                    else
                                    {
                                        <span>@Html.DisplayFor(m => m.ImportedOrders[i].CustomerId)</span>
                                    }
                                </td>
                                <td>
                                    @if (Model.ImportedOrders[i].IsCustomerActive)
                                    {
                                        @Html.DisplayFor(m => m.ImportedOrders[i].CustomerName)
                                    }
                                    else
                                    {
                                        <span style="text-decoration: line-through" title="This customer is inactive. Pick Waves cannot be created for inactive customers.">@Html.DisplayFor(m => m.ImportedOrders[i].CustomerName)</span>
                                    }
                                </td>
                                <td style="text-align: right">
                                    @Html.DisplayFor(m => m.ImportedOrders[i].PickslipCount)
                                </td>
                                <td style="text-align: right">
                                    @Html.DisplayFor(m => m.ImportedOrders[i].DcCancelDateRange)
                                </td>
                                <td style="text-align: right">
                                    @Html.DisplayFor(m => m.ImportedOrders[i].DollarsOrdered)
                                </td>
                                <td style="text-align: right">
                                    @Html.DisplayFor(m => m.ImportedOrders[i].PiecesOrdered)
                                </td>
                                <td style="text-align: right">
                                    @Html.DisplayFor(m => m.ImportedOrders[i].ImportDateRange)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @for (var j = 0; j < Model.BucketsByStatus.Count; ++j)
        {
            <div id="@Model.BucketsByStatus.Values[j][0].BucketStatus.ToString()">
                <h2>
                    <em>@Model.StateDisplayNames[Model.BucketsByStatus.Values[j][0].BucketStatus]</em> Pick Waves
                </h2>
                <div class="boxContent">
                    @TabDescription(Model.BucketsByStatus.Values[j][0].BucketStatus)

                    <table>
                        <thead>
                            <tr>
                                <th colspan="3">
                                    Customer
                                </th>
                                <th rowspan="2">
                                    # Waves
                                </th>
                                <th rowspan="2">Highest priority</th>
                                <th rowspan="2" title="Earliest DC cancel date [MM/DD] to Latest DC cancel date [MM/DD/YYYY]" style="white-space: nowrap">
                                    DC Cancel
                                    <span class="ui-icon ui-icon-triangle-1-n" style="display: inline-block;"></span><sub>1</sub>
                                </th>
                                <td colspan="2">
                                    Pieces
                                </td>
                            </tr>
                            <tr>
                                <th>#</th>
                                <th>ID</th>
                                <th>Name</th>
                                <th style="white-space: nowrap">Ordered</th>
                                <td>
                                    <div class="pw-thin-progressbar ui-progressbar ui-widget ui-widget-content ui-corner-all" style="width: 15em;">
                                        <div style="width: 50%" class="ui-progressbar-value ui-widget-header ui-corner-left" title="Number of pieces for which boxes exist but which are not in box yet">Picked</div>
                                        <div style="left: 50%; width: 50%" class="ui-progressbar-value ui-corner-right" title="Number of pieces which are already in boxes">Not Picked</div>
                                    </div>
                                </td>
                            </tr>
                            <tr class="ui-state-active">
                                <th colspan="2">Summary</th>
                                <th>@string.Format("{0:N0} customers", Model.BucketsByStatus.Values[j].Count) </th>
                                <th>@Model.BucketsByStatus.Values[j].Sum(p => p.BucketCount)</th>
                                <th>@Model.BucketsByStatus.Values[j].Max(p => p.MaxPriorityId)</th>
                                @{
            var dr = new DcmsMobile.PickWaves.Helpers.DateRange
            {
                From = Model.BucketsByStatus.Values[j].Min(p => p.DcCancelDateRange.From),
                To = Model.BucketsByStatus.Values[j].Max(p => p.DcCancelDateRange.To)
            };
                                }
                                <th>@dr</th>
                                <th>@string.Format("{0:N0}", Model.BucketsByStatus.Values[j].Sum(p => p.OrderedPieces))</th>
                                <th>
                                    @string.Format("{0:N0}", Model.BucketsByStatus.Values[j].Sum(p => p.PickedPieces)) of
                                    @string.Format("{0:N0}", Model.BucketsByStatus.Values[j].Sum(p => p.UnpickedPieces + p.PickedPieces))
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (var i = 0; i < Model.BucketsByStatus.Values[j].Count; ++i)
                            {
                                <tr class="@(i % 2 == 0 ? "rowA" : "rowB")">
                                    <td style="text-align: right">@(i + 1)</td>

                                    <td>

                                        <ul class="customerActionMenu">
                                            <li>
                                                <a href="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.Index(
                                                                     new DcmsMobile.PickWaves.ViewModels.ManageWaves.IndexViewModel(Model.BucketsByStatus.Values[j][i].CustomerId, Model.BucketsByStatus.Values[j][i].BucketStatus)))" title="Wave List">
                                                    <span class="ui-icon ui-icon-zoomin"></span>
                                                    @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].CustomerId)
                                                </a>
                                            </li>
                                        </ul>

                                    </td>
                                    <td>
                                        <span @Html.Raw(Model.BucketsByStatus.Values[j][i].IsCustomerActive ? "" : "style='text-decoration:line-through' title='This customer is inactive'")>@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].CustomerName)</span>
                                    </td>
                                    <td style="text-align: right">
                                        @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].BucketCount)
                                    </td>
                                    <td style="text-align: right">
                                        @Html.DisplayFor(p => p.BucketsByStatus.Values[j][i].MaxPriorityId)
                                    </td>
                                    <td style="text-align: right">
                                        @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].DcCancelDateRange)
                                    </td>
                                    <td style="text-align: right">
                                        @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].OrderedPieces)
                                        @*@if (Model.BucketsByStatus.Values[j][i].CancelledPieces > 0)
                                            {
                                                <div style="text-align: right; display: inline-block; font-style: italic; background-color: thistle">
                                                    @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].CancelledPieces) cancelled
                                                </div>
                                            }*@
                                    </td>
                                    <td>
                                        @if (Model.BucketsByStatus.Values[j][i].UnpickedPieces > 0 || Model.BucketsByStatus.Values[j][i].PickedPieces > 0)
                                        {
                                            <div class="pw-thin-progressbar ui-progressbar ui-widget ui-widget-content ui-corner-all" style="width: 14em;"
                                                 title="@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].PickedPieces) of @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].OrderedPieces) pieces picked.">
                                                @if (Model.BucketsByStatus.Values[j][i].PickedPieces > 0)
                                                {
                                                    <div style="width: @Model.BucketsByStatus.Values[j][i].PercentPickedPieces%" class="ui-progressbar-value ui-widget-header ui-corner-left">
                                                        @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].PickedPieces)
                                                    </div>
                                                }
                                                @if (Model.BucketsByStatus.Values[j][i].UnpickedPieces > 0)
                                                {
                                                    <div style="left: @(Model.BucketsByStatus.Values[j][i].PercentPickedPieces)%; width: @Model.BucketsByStatus.Values[j][i].PercentUnpickedPieces%" class="ui-progressbar-value ui-corner-right">
                                                        @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].UnpickedPieces)
                                                    </div>
                                                }
                                            </div>
                                        }
                                        @*@if (Model.BucketsByStatus.Values[j][i].PickingDateRange.To.HasValue)
                                            {
                                                <div>
                                                    Picked from @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].PickingDateRange)

                                                </div>
                                            }*@
                                        @if (Model.BucketsByStatus.Values[j][i].UncreatedPieces > 0)
                                        {
                                            if (Model.BucketsByStatus.Values[j][i].UncreatedPieces >= Model.BucketsByStatus.Values[j][i].OrderedPieces)
                                            {
                                                <div>Boxes not created</div>
                                            }
                                            else
                                            {
                                                if (Model.BucketsByStatus.Values[j][i].BucketStatus == DcmsMobile.PickWaves.Helpers.ProgressStage.Frozen)
                                                {
                                                }
                                                else
                                                {
                                                    @* We never expect to see this message because we always create boxes for all pieces*@
                                                    <div class="ui-state-error">
                                                        @Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].UncreatedPieces) pieces cancelled
                                                    </div>
                                                }
                                            }
                                        }
                                    </td>
                                    @*<td>
                                            @if (Model.BucketsByStatus.Values[j][i].PullAreaCount > 0)
                                            {
                                                <div>
                                                    @if (Model.BucketsByStatus.Values[j][i].PullAreaCount >= 1)
                                                    {
                                                        <text>
                                                        <em>Pull From</em> <span style="white-space: nowrap">@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].MaxPullArea.BuildingId)-@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].MaxPullArea.ShortName)</span>
                                                        </text>
                                                    }
                                                    @if (Model.BucketsByStatus.Values[j][i].PullAreaCount >= 2)
                                                    {
                                                        <text>&amp; </text>
                                                        <span style="white-space: nowrap">@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].MinPullArea.BuildingId)-@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].MinPullArea.ShortName)</span>
                                                    }
                                                    @if (Model.BucketsByStatus.Values[j][i].PullAreaCount >= 3)
                                                    {
                                                        <span title="More pull areas" style="font-size: 0.9em">+@(Model.BucketsByStatus.Values[j][i].PullAreaCount - 2) more</span>
                                                    }
                                                </div>
                                            }
                                            @if (Model.BucketsByStatus.Values[j][i].PitchAreaCount > 0)
                                            {
                                                <div>
                                                    @if (Model.BucketsByStatus.Values[j][i].PitchAreaCount >= 1)
                                                    {
                                                        <em>Pitch From</em>
                                                        <span style="white-space: nowrap">@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].MaxPitchArea.BuildingId)-@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].MaxPitchArea.ShortName)</span>
                                                    }
                                                    @if (Model.BucketsByStatus.Values[j][i].PitchAreaCount >= 2)
                                                    {
                                                        <text>&amp; </text>
                                                        <span style="white-space: nowrap">@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].MinPitchArea.BuildingId)-@Html.DisplayFor(m => m.BucketsByStatus.Values[j][i].MinPitchArea.ShortName)</span>
                                                    }
                                                    @if (Model.BucketsByStatus.Values[j][i].PitchAreaCount >= 3)
                                                    {
                                                        <span title="More pitch areas" style="font-size: 0.9em">+@(Model.BucketsByStatus.Values[j][i].PitchAreaCount - 2) more</span>
                                                    }
                                                </div>
                                            }
                                        </td>*@
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>
@section scripts{
    <link type="text/css" href="@Links_PickWaves.Areas.PickWaves.Content.Home_Index_min_css" rel="stylesheet" />
    <script type="text/javascript" src="@Links_PickWaves.Areas.PickWaves.Scripts.Home_Index_js"></script>
}
@*
    $Id$
    $Revision$
    $URL$
    $Header$
    $Author$
    $Date$
*@ 