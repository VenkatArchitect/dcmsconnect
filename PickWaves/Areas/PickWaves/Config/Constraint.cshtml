@using DcmsMobile.PickWaves.ViewModels.Config
@model ConstraintViewModel
@{
    ViewBag.Title = "Constraint";
    Layout = @MVC_PickWaves.PickWaves.SharedViews.Views._layoutPickWaves;
}

@section applinks{
    <li>@Html.ActionLink("SKU Case", MVC_PickWaves.PickWaves.Config.SkuCase())</li>
    <li class="divider">
    </li>
}


<div class="container">
    <h2 style="margin-top:0px;">
        @ViewBag.Title
    </h2>

    <p>
        Customers can impose constraints on the cartons they are willing to accept. DCMS supports this scenario by allowing you to define the customer constraints
        on a per customer basis.
    </p>

    <div role="tabpanel">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs bg-info" role="tablist">
            <li role="presentation" class="active"><a href="#tab1" role="tab" data-toggle="tab">Default Constraint</a></li>
            <li role="presentation"><a href="#tab2" role="tab" data-toggle="tab">Customer Wise List</a></li>
        </ul>
        <!-- Tab panes -->
        <div class="tab-content">
            <div role="tabpanel" class="tab-pane active" id="tab1">
                <blockquote>Default customer constraints</blockquote>

                <ul class="list-group">
                    <li class="list-group-item list-group-item-success">
                        <h4 class="list-group-item-heading">
                            Constraints
                            <small>Default Values</small>
                        </h4>
                    </li>
                    <li class="list-group-item list-group-item-info">
                        @Html.LabelFor(m => m.DefaultConstraints.MaxBoxWeight)
                        @Html.DisplayFor(m => m.DefaultConstraints.MaxBoxWeight)
                    </li>
                    @foreach (var item in Model.CustomerGroupedList.Where(item => item.Value.MaxBoxWeight.HasValue))
                    {
                        <li class="list-group-item">
                            <h4 class="list-group-item-heading">
                                @if (Model.UserIsManager)
                                {
                                    <button class="btn btn-xs btn-primary pull-right" title="Edit customer constraints"
                                            data-editor-url="@Url.Action(MVC_PickWaves.PickWaves.Config.CustomerConstraintEditView(item.Key.CustomerId))">
                                        <span class="glyphicon glyphicon-edit"></span>
                                        Edit
                                    </button>
                                }
                                @item.Key.CustomerId
                                <small> @item.Key.CustomerName</small>
                                <em>@item.Value.MaxBoxWeight lbs</em>
                            </h4>
                        </li>
                    }
                    <li class="list-group-item list-group-item-info">
                        @Html.LabelFor(m => m.DefaultConstraints.MaxSkuWithinBox)
                        @Html.DisplayFor(m => m.DefaultConstraints.MaxSkuWithinBox)
                    </li>

                    @foreach (var item in Model.CustomerGroupedList.Where(item => item.Value.MaxSkuWithinBox.HasValue))
                    {
                        <li class="list-group-item">
                            <h4 class="list-group-item-heading">
                                @if (Model.UserIsManager)
                                {
                                    <button class="btn btn-xs btn-primary pull-right" title="Edit customer constraints"
                                            data-editor-url="@Url.Action(MVC_PickWaves.PickWaves.Config.CustomerConstraintEditView(item.Key.CustomerId))">
                                        <span class="glyphicon glyphicon-edit"></span>
                                        Edit
                                    </button>
                                }
                                @item.Key.CustomerId
                                <small> @item.Key.CustomerName</small>
                                <em>@item.Value.MaxSkuWithinBox</em>
                            </h4>

                        </li>
                    }

                    <li class="list-group-item list-group-item-info">
                        @Html.LabelFor(m => m.DefaultConstraints.IsSingleStyleColor)
                        @string.Format(Model.DefaultConstraints.IsSingleStyleColor ? "Set" : "Not Set")
                    </li>

                    @foreach (var item in Model.CustomerGroupedList.Where(item => item.Value.IsSingleStyleColor))
                    {
                        <li class="list-group-item">
                            <h4 class="list-group-item-heading">
                                @if (Model.UserIsManager)
                                {
                                    <button class="btn btn-xs btn-primary pull-right" title="Edit customer constraints"
                                            data-editor-url="@Url.Action(MVC_PickWaves.PickWaves.Config.CustomerConstraintEditView(item.Key.CustomerId))">
                                        <span class="glyphicon glyphicon-edit"></span>
                                        Edit
                                    </button>
                                }
                                @item.Key.CustomerId
                                <small> @item.Key.CustomerName</small>
                            </h4>
                        </li>
                    }
                    <li class="list-group-item list-group-item-info">
                        @Html.LabelFor(m => m.DefaultConstraints.RequiredMinSkuPieces)
                        @Html.DisplayFor(m => m.DefaultConstraints.RequiredMinSkuPieces)
                    </li>

                    @foreach (var item in Model.CustomerGroupedList.Where(item => item.Value.RequiredMinSkuPieces.HasValue))
                    {
                        <li class="list-group-item">
                            <h4 class="list-group-item-heading">
                                @if (Model.UserIsManager)
                                {
                                    <button class="btn btn-xs btn-primary pull-right" title="Edit customer constraints"
                                            data-editor-url="@Url.Action(MVC_PickWaves.PickWaves.Config.CustomerConstraintEditView(item.Key.CustomerId))">
                                        <span class="glyphicon glyphicon-edit"></span>
                                        Edit
                                    </button>
                                }

                                @item.Key.CustomerId @item.Key.CustomerName
                                <small> @item.Value.RequiredMinSkuPieces</small>
                            </h4>
                        </li>
                    }

                    <li class="list-group-item list-group-item-info">
                        @Html.LabelFor(m => m.DefaultConstraints.RequiredMaxSkuPieces)
                        @Html.DisplayFor(m => m.DefaultConstraints.RequiredMaxSkuPieces)
                    </li>
                    @foreach (var item in Model.CustomerGroupedList.Where(item => item.Value.RequiredMaxSkuPieces.HasValue))
                    {
                        <li class="list-group-item">

                            <h4 class="list-group-item-heading">
                                @if (Model.UserIsManager)
                                {
                                    <button class="btn btn-xs btn-primary pull-right" title="Edit customer constraints"
                                            data-editor-url="@Url.Action(MVC_PickWaves.PickWaves.Config.CustomerConstraintEditView(item.Key.CustomerId))">
                                        <span class="glyphicon glyphicon-edit"></span>
                                        Edit
                                    </button>
                                }
                                @item.Key.CustomerId
                                <small> @item.Key.CustomerName</small>
                                <em>
                                    @item.Value.RequiredMaxSkuPieces
                                </em>
                            </h4>
                        </li>
                    }
                </ul>

            </div>
            <div role="tabpanel" class="tab-pane active" id="tab2">
                <blockquote>
                    Constraints overridden by customers
                    @if (Model.UserIsManager)
                    {
                        <button class="btn btn-primary" id="btnAddNewCustConstraint" data-add-customer="@Url.Action(MVC_PickWaves.PickWaves.Config.CustomerConstraintAddView())">
                            <span class="glyphicon glyphicon-plus"></span> Add Customer..
                        </button>
                    }
                </blockquote>

                <ul class="list-group">


                    @for (var i = 0; i < Model.CustomerGroupedList.Count; ++i)
                    {
                        <li class="list-group-item list-group-item-success">
                            <h4 class="list-group-item-heading">
                                @if (Model.UserIsManager)
                                {
                                    <button class="btn btn-primary btn-xs pull-right" data-editor-url="@Url.Action(MVC_PickWaves.PickWaves.Config.CustomerConstraintEditView(Model.CustomerGroupedList.Keys[i].CustomerId))">
                                        <span class="glyphicon glyphicon-edit"></span>
                                        Edit
                                    </button>

                                }
                                <small>@(i + 1) </small>
                                @Model.CustomerGroupedList.Keys[i].CustomerId
                                <small>@Model.CustomerGroupedList.Keys[i].CustomerName</small>
                            </h4>
                        </li>
                    <li class="list-group-item">
                        <ul class="list-inline">
                            <li>Single Style Color: @Html.DisplayFor(m => m.CustomerGroupedList.Values[i].IsSingleStyleColor)</li>
                            <li>Max Weight: @Html.DisplayFor(m => m.CustomerGroupedList.Values[i].MaxBoxWeight)</li>
                            <li>Max number of SKUs: @Html.DisplayFor(m => m.CustomerGroupedList.Values[i].MaxSkuWithinBox)</li>
                            <li>Max Pieces of single SKU: @Html.DisplayFor(m => m.CustomerGroupedList.Values[i].RequiredMaxSkuPieces)</li>
                            <li>Min Pieces of single SKU: @Html.DisplayFor(m => m.CustomerGroupedList.Values[i].RequiredMinSkuPieces)</li>
                        </ul>                      
                    </li>
                    }
                </ul>


            </div>
        </div>
    </div>


</div>



@*@section scripts{
        <link href="@Links_PickWaves.Areas.PickWaves.Config.Config_css" rel="stylesheet" type="text/css" />
        <script src="@Links_PickWaves.Areas.PickWaves.Config.Config_js" type="text/javascript"></script>
    }*@
