@model DcmsMobile.PickWaves.ViewModels.BoxPickPallet.BoxPickPalletViewModel
@{
    ViewBag.Title = "Expedite Box Picking";
    Layout = @MVC_PickWaves.PickWaves.SharedViews.Views._layoutPickWaves;
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}

<div class="container">

    <h2 style="margin-top:0">
        @ViewBag.Title
        <small>
            Pick Wave @Html.DisplayFor(m => m.BucketId): @Html.DisplayFor(m => m.BucketName)
            @if (Model.IsFrozen)
            {
                <span class="label label-default">Frozen</span>
            }
        </small>

    </h2>



    <ul class="list-group">
        <li class="list-group-item list-group-item-success">

            <div class="row">
                @using (Html.BeginForm(MVC_PickWaves.PickWaves.BoxPickPallet.Index(), FormMethod.Get))
                {
                    <div class="col-lg-4">
                        <h4 class="list-group-item-heading">
                            Search or <a href="@Url.Action(MVC_PickWaves.PickWaves.BoxPickPallet.Index())">Auto Select Pick Wave</a>
                        </h4>
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.BucketId, new
                        {
                            size = 5,
                            maxlength = 5,
                            @class = "form-control"
                        })
                            <span class="input-group-btn">
                                <button class="btn btn-primary" type="button">Go!</button>
                            </span>

                        </div>

                    </div>

                }
                <div class="col-lg-4">
                    @if (Model.BucketId != null)
                    {
                        <h4 class="list-group-item-heading">
                            Customer @Html.DisplayFor(m => m.CustomerId): @Html.DisplayFor(m => m.CustomerName)
                        </h4>
                        <p class="list-group-item-text">
                            @if (Model.PullBuildingId == Model.PitchBuildingId)
                            {
                                <span>Pull & Pitch from </span>@Html.DisplayFor(m => m.PullBuildingId)
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(Model.PullBuildingId))
                                {
                                    <span> @Html.LabelFor(m => m.PullBuildingId) </span>
                                    @Html.DisplayFor(m => m.PullBuildingId)
                                }
                                if (!string.IsNullOrEmpty(Model.PitchBuildingId))
                                {
                                    <span> &bull; @Html.LabelFor(m => m.PitchBuildingId) </span>
                                    @Html.DisplayFor(m => m.PitchBuildingId)
                                }
                            }
                        </p>
                    }

                </div>
                <div class="col-lg-4" style="text-align:right">
                    @if (Model.UserIsManager && !Model.IsFrozen)
                    {
                        if (Model.ExpeditedBoxCount < Model.TotalBoxes)
                        {
                            <span> @string.Format("{0} boxes need to be expedited.", Model.TotalBoxes - Model.ExpeditedBoxCount)</span>
                            <button class="btn btn-primary btn-sm" data-toggle="modal" data-target="#modal" @( Model.ExpeditedBoxCount < Model.TotalBoxes ? "" : "disabled=\"disabled\"")>
                                Create Pallet..
                            </button>
                        }
                        else
                        {
                            <span>All Boxes have been expedited.</span>
                        }
                    }

                </div>
            </div>

        </li>

        @if (Model.BucketId != null)
        {
            <li class="list-group-item list-group-item-info">
                <div class="row">
                    <div class="col-md-4">
                        <h4 class="list-group-item-heading">
                            Pallet
                            <small>
                                <span class="label label-success">Picked on</span>
                                <span class="label label-info">Printed on</span>
                            </small>
                        </h4>
                    </div>
                    <div class="col-md-4">

                        <div class="progress" style="margin-bottom:0">
                            <div style="width: @Model.PercentExpedited%; overflow:visible; padding-left:1mm" class="progress-bar progress-bar-info">
                                <strong style="white-space:nowrap" class="text-info">
                                    @string.Format("{0:N0} of {1:N0} Expedited Boxes", Model.ExpeditedBoxCount, Model.TotalBoxes) <em>@Model.PercentExpedited% </em>
                                </strong>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        @if (Model.PalletList.Any())
                        {
                            <span class="pull-right">Pallet Limit  <span class="badge">@Model.PalletLimit boxes</span></span>
                        }
                    </div>
                </div>

            </li>
            if (Model.PalletList.Any())
            {

                for (var j = 0; j < Model.PalletList.Count; j++)
                {
                    <li class="list-group-item">
                        <div class="row">
                            <div class="col-md-4">
                                <h4 class="list-group-item-heading">
                                    <a href='@Url.Content(string.Format("~/Inquiry/BoxPallet/{0}", Model.PalletList[j].PalletId))' target="printSpecificUcc" class="data-palletId">
                                        @Html.DisplayFor(m => m.PalletList[j].PalletId)
                                    </a>
                                    <small>
                                        <span class="label label-success">@Html.DisplayFor(m => m.PalletList[j].IaChangeDate)</span>
                                        <span class="label label-info">@Html.DisplayFor(m => m.PalletList[j].PrintDate)</span>
                                    </small>
                                </h4>
                            </div>
                            <div class="col-md-4">
                                <div class="progress" style="margin-bottom:0">
                                    <div style="width:  @Model.PalletList[j].PercentPickedBoxes%; overflow:visible; padding-left:1mm" class="progress-bar progress-bar-info">
                                        <strong style="white-space:nowrap" class="text-info">
                                            @if (Model.PalletList[j].PickedBoxes < Model.PalletList[j].TotalBoxesOnPallet)
                                            {
                                                <span>
                                                    @Html.DisplayFor(m => m.PalletList[j].PickedBoxes) of @Html.DisplayFor(m => m.PalletList[j].TotalBoxesOnPallet) boxes picked <em>@Model.PalletList[j].PercentPickedBoxes%</em>
                                                </span>
                                            }
                                            else
                                            {
                                                <span>
                                                    All @Html.DisplayFor(m => m.PalletList[j].TotalBoxesOnPallet) boxes picked <em>@Model.PalletList[j].PercentPickedBoxes%</em>
                                                </span>
                                            }

                                        </strong>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                @if (Model.UserIsManager)
                                {
                                    <a class="btn btn-xs btn-default pull-right" title="Click to print the pallet" href='@Url.Content(string.Format("~/Inquiry/BoxPallet/{0}?showPrintDialog={1}", Model.PalletList[j].PalletId, "True"))' target="printPallet"
                                       style="display: inline-block;" data-total-boxes="@Model.PalletList[j].TotalBoxesOnPallet"><span class="glyphicon glyphicon-print"></span></a>
                                    if (!Model.IsFrozen)
                                    {
                                        if (Model.PalletList[j].PickedBoxes < Model.PalletList[j].TotalBoxesOnPallet)
                                        {
                                            using (Html.BeginForm(MVC_PickWaves.PickWaves.BoxPickPallet.RemoveUnPickedBoxesFromPallet(), FormMethod.Post, new { style = "display:inline-block" }))
                                            {
                                                <input type="hidden" name="@Model.NameFor(m => m.BucketId)" value="@Model.BucketId" />
                                                <input type="hidden" name="@Model.NameFor(m => m.PalletId)" value="@Model.PalletList[j].PalletId" />
                                                <button type="submit" class="btnRemoveUnpickedBoxes" title="Remove non physical boxes from the pallet" data-unpicked-boxes="@(Model.PalletList[j].TotalBoxesOnPallet - Model.PalletList[j].PickedBoxes)" data-icon="ui-icon-minus">
                                                    <span class="glyphicon glyphicon-minus"></span>
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <button class="btn btn-xs pull-right btn-default" type="button" disabled="disabled" title="Disabled because all boxes have been picked" data-icon="ui-icon-minus">
                                                <span class="glyphicon glyphicon-minus"></span>
                                            </button>
                                        }
                                        if (Model.ExpeditedBoxCount < Model.TotalBoxes)
                                        {
                                            <button type="submit" class="btnExpediteBoxes btn btn-xs pull-right btn-default" title="Expedite the remaining boxes" data-icon="ui-icon-plus">
                                                <span class="glyphicon glyphicon-plus"></span>
                                            </button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-xs pull-right btn-default" disabled="disabled" title="Disabled because all boxes have been expedited" data-icon="ui-icon-plus">
                                                <span class="glyphicon glyphicon-plus"></span>
                                            </button>
                                        }
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-xs pull-right btn-default" disabled="disabled" title="Disabled because all boxes have been picked" data-icon="ui-icon-minus">
                                            <span class="glyphicon glyphicon-plus"></span>
                                        </button>
                                        <button type="button" class="btn btn-xs pull-right btn-default" disabled="disabled" title="Disabled because all boxes have been expedited" data-icon="ui-icon-plus">
                                            <span class="glyphicon glyphicon-plus"></span>
                                        </button>
                                    }
                                }

                            </div>

                        </div>





                    </li>
                }
            }
        }
    </ul>

</div>



<!-- Modal -->
<div class="modal fade" id="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                </button>
                <h4 class="modal-title">Create Pallet</h4>
            </div>
            <form action="@Url.Action(MVC_PickWaves.PickWaves.BoxPickPallet.CreatePallet())" method="post">
                <div class="modal-body">
                    <div id="divInfo" class="ui-state-highlight" style="margin-bottom: 1em;">
                        To keep more boxes on this pallet, please enter new pallet limit.
                    </div>
                    @Html.HiddenFor(m => m.BucketId)
                    @Html.LabelFor(m => m.PalletId)
                    @Html.TextBoxFor(m => m.PalletId, new { style = "text-transform: uppercase", id = "tbPalletId" })<span>*</span>
                    @Html.ValidationMessageFor(m => m.PalletId)
                    <br />
                    Pallet Limit
                    @Html.TextBoxFor(m => m.PalletLimit, new { size = 5 })<span>*</span>
                    @Html.ValidationMessageFor(m => m.PalletLimit)

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>






@*<div id="divCreateDialog">
        @using (Html.BeginForm(MVC_PickWaves.PickWaves.BoxPickPallet.CreatePallet(), FormMethod.Post, new
        {
            id = "frmCreate"
        }))
        {
            <div id="divInfo" class="ui-state-highlight" style="margin-bottom: 1em;">
                To keep more boxes on this pallet, please enter new pallet limit.
            </div>
            @Html.HiddenFor(m => m.BucketId)
            @Html.LabelFor(m => m.PalletId)
            @Html.TextBoxFor(m => m.PalletId, new { style = "text-transform: uppercase", id = "tbPalletId" })<span>*</span>
            @Html.ValidationMessageFor(m => m.PalletId)
            <br />
            @:Pallet Limit
            @Html.TextBoxFor(m => m.PalletLimit, new { size = 5 })<span>*</span>
            @Html.ValidationMessageFor(m => m.PalletLimit)
        }
    </div>*@
@*@section scripts{
    <script src="@Links_PickWaves.Scripts.jquery_validate_js" type="text/javascript"></script>
    <script src="@Links_PickWaves.Scripts.jquery_validate_unobtrusive_js" type="text/javascript"></script>
    <script src="@Links_PickWaves.Areas.PickWaves.BoxPickPallet.BoxPickPalletIndex_all_js" type="text/javascript"></script>
        }*@
