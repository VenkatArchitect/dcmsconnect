@using DcmsMobile.PickWaves.Helpers
@model DcmsMobile.PickWaves.ViewModels.BucketModel
@{
    var obj = ViewBag.IsEditable;
    var isEditable = obj != null && (bool)obj;
}
@*
        To use this template, make sure you include BucketModel-Display.partial.css and bucketModel.partial.js, ThinProgressBar.partial.css.
    This template use class "pitched-box" to show pitching progress and "pulled-box" for pulling progress.

    The link to edit wave has the class edit-wave applied to it
*@

<div class="panel panel-default">
    <div class="panel-heading">
        <h4 class="panel-title">
            <span class="@(Model.IsFrozen ? "text-muted" : (string)null)">
                Pick Wave - @Html.DisplayFor(m => m.BucketId)

                @if (Model.IsFrozen)
                {
                    <small>  <em>Frozen</em></small>
                }
                @Html.DisplayFor(m => m.BucketName)
            </span>
        </h4>
    </div>
    <div class="panel-body">
        <div class="row">
            <div class="col-md-6">
                <div class="h3" >
                    <span style="font-size: 1.2em" title="@Html.DisplayFor(m => m.PiecesComplete) of @Html.DisplayFor(m => m.PiecesToShip) picked">
                        @Html.DisplayFor(m => m.OrderedPieces) Pieces Ordered &bull; @Html.DisplayFor(m => m.PercentPiecesComplete)
                    </span> complete
                    <div style="font-weight: normal; font-style: italic">
                        @Html.DisplayFor(m => m.UnderPickedPieces)
                        <span style="padding-left: 2em">
                            @Html.DisplayFor(m => m.CancelledPieces)
                        </span>
                    </div>
                </div>
                <div class="div-bucket" style="white-space:nowrap"
                     data-increase-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.IncrementPriority(Model.BucketId))"
                     data-decrease-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.DecrementPriority(Model.BucketId))">
                    <span>
                        DC Cancel <em>@Html.DisplayFor(m => m.DcCancelDateRange)</em>
                    </span>&bull;
                    @if (isEditable && Model.BucketState != ProgressStage.Completed)
                    {
                        <span>Priority </span>
                        <span class="ui-icon ui-icon-arrowthick-1-s" style="display: inline-block" title="Decrease priority"></span>
                        <span class="span-Priority" style="font-weight: bold">@Html.DisplayFor(m => m.PriorityId)</span>
                        <span class="ui-icon ui-icon-arrowthick-1-n" style="display: inline-block" title="Increase priority"></span>
                    }
                    else
                    {
                        <span>Priority </span>
                        <span class="span-Priority" style="font-weight: bold">@Html.DisplayFor(m => m.PriorityId)</span>
                    }
                    &bull; <strong>@Html.DisplayFor(m => m.CountPickslips)</strong> Pickslips &bull; <strong>@Html.DisplayFor(m => m.CountPurchaseOrder)</strong> POs
                </div>
                @if (Model.RequiredBoxExpediting)
                {    <hr />
                    <strong><em>Required Box Expediting</em></strong>
                }
                @if (Model.QuickPitch)
                {    <hr />
                    <strong><em>Quick Pitching Required</em></strong>
                }
                @if (Model.CountNotAssignedSku > 0)
                {
                    <div>@Html.DisplayFor(m => m.CountNotAssignedSku)</div>
                }
                <div>Pick Wave Created on @Html.DisplayFor(m => m.CreationDate) by @Html.DisplayFor(m => m.CreatedBy)</div>
            </div>
            <div class="col-md-6">
                <div class="h3" >
                    <div style="font-size: 1.2em">
                        @Html.DisplayFor(m => m.CountValidatedBoxes) of @Html.DisplayFor(m => m.CountTotalBoxes) boxes Validated
                    </div>
                    @if (Model.CountCancelledBoxes > 0)
                    {
                        <span style="font-weight: normal; font-style: italic">
                            @Html.DisplayFor(m => m.CountCancelledBoxes) boxes cancelled
                        </span>
                    }
                    @if (Model.CountNotStartedBoxes > 0)
                    {
                        <span style="font-weight: normal;font-style: italic; padding-left:2em" data-activity="@((int)BucketActivityType.NotSet)">
                            <span class="ui-progressbar-value" data-boxstate="@((int)BoxState.NotStarted)">
                                @Html.DisplayFor(m => m.CountNotStartedBoxes) boxes not started
                            </span>
                        </span>
                    }
                </div>

                @if (Model.Activities.Count(p => !string.IsNullOrWhiteSpace(p.AreaId)) > 0)
                {
                    for (var i = 0; i < Model.Activities.Count; i++)
                    {
                        if (!string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) || Model.Activities[i].PiecesBoxesCreated > 0)
                        {
                            <div class='@Html.Raw(Model.Activities[i].ActivityType == BucketActivityType.Pulling ? "pulled-box" : "pitched-box")' style="padding-top: 0.5em;padding-bottom: 0.5em">
                                <span style="width: 12em; display: inline-block; white-space: nowrap; max-width: 12em">
                                    <em>@Html.DisplayFor(m => m.Activities[i].DisplayName)</em>
                                    <strong><span title="@Model.Activities[i].AreaDescription">@Html.DisplayFor(m => m.Activities[i].AreaShortNameDisplay)</span></strong>
                                </span>
                                @Html.Partial(MVC_PickWaves.PickWaves.SharedViews.Views._activityProgressPartial, Model.Activities[i])
                                @if (Model.Activities[i].ActivityType == BucketActivityType.Pitching && string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) && isEditable)
                                {
                                    <div>
                                        To minimize the number of pieces to be pitched,
                                        <a href="#" class="edit-wave">
                                            Edit
                                        </a>and save the pick wave
                                    </div>

                                }
                            </div>
                        }
                    }
                    if (Model.BoxNotCreatedPieces > 0)
                    {
                        if (Model.IsFrozen)
                        {
                            <span>@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</span>
                        }
                        else
                        {
                            <span class="ui-state-error">@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</span>
                        }
                    }
                    @Html.DisplayFor(m => m.OverShippedPieces)
                }
                else
                {
                    <div class="ui-state-error">Area is not decided yet for pulling and/ pitching</div>
                }
                
            </div>
        </div>

        </div>

        @*<table class="bucketmodel-display">
            <caption @Html.Raw(Model.IsFrozen ? "class='ui-state-disabled' title='This pick wave is frozen'" : "")>
                Pick Wave - <span style="font-size: 1.3em">@Html.DisplayFor(m => m.BucketId)</span>
                <span @Html.Raw("class='isFrozen" + (Model.IsFrozen ? "" : " ui-helper-hidden") + "'")>(Frozen)</span>
                <span class="@(Model.IsFrozen ? "ui-state-disabled" : "") bucket-name">
                    @Html.DisplayFor(m => m.BucketName)
                </span>
            </caption>
            <thead>
                <tr>
                    <td style="text-align: center">
                        <span style="font-size: 1.2em" title="@Html.DisplayFor(m => m.PiecesComplete) of @Html.DisplayFor(m => m.PiecesToShip) picked">
                            @Html.DisplayFor(m => m.OrderedPieces) Pieces Ordered &bull; @Html.DisplayFor(m => m.PercentPiecesComplete)
                        </span> complete
                        <div style="font-weight: normal; font-style: italic">
                            @Html.DisplayFor(m => m.UnderPickedPieces)
                            <span style="padding-left: 2em">
                                @Html.DisplayFor(m => m.CancelledPieces)
                            </span>
                        </div>
                    </td>
                    <td style="text-align: center">
                        <div style="font-size: 1.2em">
                            @Html.DisplayFor(m => m.CountValidatedBoxes) of @Html.DisplayFor(m => m.CountTotalBoxes) boxes Validated
                        </div>
                        @if (Model.CountCancelledBoxes > 0)
                        {
                            <span style="font-weight: normal; font-style: italic">
                                @Html.DisplayFor(m => m.CountCancelledBoxes) boxes cancelled
                            </span>
                        }
                        @if (Model.CountNotStartedBoxes > 0)
                        {
                            <span style="font-weight: normal;font-style: italic; padding-left:2em" data-activity="@((int)BucketActivityType.NotSet)">
                                <span class="ui-progressbar-value" data-boxstate="@((int)BoxState.NotStarted)">
                                    @Html.DisplayFor(m => m.CountNotStartedBoxes) boxes not started
                                </span>
                            </span>
                        }
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="vertical-align: top; padding-top: 1mm">
                        <div class="div-bucket" style="white-space:nowrap"
                             data-increase-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.IncrementPriority(Model.BucketId))"
                             data-decrease-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.DecrementPriority(Model.BucketId))">
                            <span>
                                DC Cancel <em>@Html.DisplayFor(m => m.DcCancelDateRange)</em>
                            </span>&bull;
                            @if (isEditable && Model.BucketState != ProgressStage.Completed)
                            {
                                <span>Priority </span>
                                <span class="ui-icon ui-icon-arrowthick-1-s" style="display: inline-block" title="Decrease priority"></span>
                                <span class="span-Priority" style="font-weight: bold">@Html.DisplayFor(m => m.PriorityId)</span>
                                <span class="ui-icon ui-icon-arrowthick-1-n" style="display: inline-block" title="Increase priority"></span>
                            }
                            else
                            {
                                <span>Priority </span>
                                <span class="span-Priority" style="font-weight: bold">@Html.DisplayFor(m => m.PriorityId)</span>
                            }
                            &bull; <strong>@Html.DisplayFor(m => m.CountPickslips)</strong> Pickslips &bull; <strong>@Html.DisplayFor(m => m.CountPurchaseOrder)</strong> POs
                        </div>
                        @if (Model.RequiredBoxExpediting)
                        {    <hr />
                            <strong><em>Required Box Expediting</em></strong>
                        }
                        @if (Model.QuickPitch)
                        {    <hr />
                            <strong><em>Quick Pitching Required</em></strong>
                        }
                        @if (Model.CountNotAssignedSku > 0)
                        {
                            <div>@Html.DisplayFor(m => m.CountNotAssignedSku)</div>
                        }
                        <div>Pick Wave Created on @Html.DisplayFor(m => m.CreationDate) by @Html.DisplayFor(m => m.CreatedBy)</div>
                    </td>

                    <td>
                        @if (Model.Activities.Count(p => !string.IsNullOrWhiteSpace(p.AreaId)) > 0)
                        {
                            for (var i = 0; i < Model.Activities.Count; i++)
                            {
                                if (!string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) || Model.Activities[i].PiecesBoxesCreated > 0)
                                {
                                    <div class='@Html.Raw(Model.Activities[i].ActivityType == BucketActivityType.Pulling ? "pulled-box" : "pitched-box")' style="padding-top: 0.5em;padding-bottom: 0.5em">
                                        <span style="width: 12em; display: inline-block; white-space: nowrap; max-width: 12em">
                                            <em>@Html.DisplayFor(m => m.Activities[i].DisplayName)</em>
                                            <strong><span title="@Model.Activities[i].AreaDescription">@Html.DisplayFor(m => m.Activities[i].AreaShortNameDisplay)</span></strong>
                                        </span>
                                        @Html.Partial(MVC_PickWaves.PickWaves.SharedViews.Views._activityProgressPartial, Model.Activities[i])
                                        @if (Model.Activities[i].ActivityType == BucketActivityType.Pitching && string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) && isEditable)
                                        {
                                            <div>
                                                To minimize the number of pieces to be pitched,
                                                <a href="#" class="edit-wave">
                                                    Edit
                                                </a>and save the pick wave
                                            </div>

                                        }
                                    </div>
                                }
                            }
                            if (Model.BoxNotCreatedPieces > 0)
                            {
                                if (Model.IsFrozen)
                                {
                                    <span>@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</span>
                                }
                                else
                                {
                                    <span class="ui-state-error">@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</span>
                                }
                            }
                            @Html.DisplayFor(m => m.OverShippedPieces)
                        }
                        else
                        {
                            <div class="ui-state-error">Area is not decided yet for pulling and/ pitching</div>
                        }
                    </td>
                </tr>
            </tbody>
            @if (!string.IsNullOrEmpty(Model.BucketComment))
            {
                <tfoot>
                    <tr style="border: solid 1px black">
                        <td colspan="2">
                            <strong>@Html.DisplayFor(m => m.BucketComment)</strong>
                        </td>
                    </tr>
                </tfoot>
            }
        </table>*@
