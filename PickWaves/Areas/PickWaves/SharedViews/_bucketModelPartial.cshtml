<!--This document is HTML5 Validated by "W3C Markup Validation Service" at http://validator.w3.org/ on 15 Dec 2014 by apanwar-->
@model DcmsMobile.PickWaves.ViewModels.BucketModel
@{
    // To use this partial you must:
    // - Include _bucketModelModalPartial after your container div
    // - Include script _bucketModel.partial.js in your script bundle
    bool? obj = ViewBag.IsAuthorized;
    var isAuthorized = obj ?? false;  // Is the user authorized to edit

}

<div class="row">
    <div class="col-md-6">
        <table class="table table-bordered table-condensed">
            <thead>
                <tr>
                    <th colspan="3">
                        <span class="h4">
                            <span class="label-info label">
                                @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].DisplayName)
                                <strong>@Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].AreaShortNameDisplay)</strong>
                            </span>
                            &nbsp;
                            <span class="label-success label">
                                @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling].DisplayName)
                                <strong>@Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling].AreaShortNameDisplay)</strong>
                            </span>
                        </span>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr class="text-center active">
                    <th>@Html.DisplayFor(m => m.PercentPiecesComplete) complete</th>
                    <th class="text-center">Pieces </th>
                    <th class="text-center">Boxes</th>

                </tr>
                @if (Model.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].PiecesNotStarted > 0 || Model.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling].BoxesNotStarted > 0)
                {
                <tr>
                    <th>Not Started</th>
                    <td class="text-right h4">
                        <span class="label label-info">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].PiecesNotStarted)
                        </span>
                        &nbsp;
                        <span class="label label-success">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].PiecesNotStarted)
                        </span>
                    </td>
                    <td class="text-right">
                        <span class="label label-info">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].BoxesNotStarted)
                        </span>
                        &nbsp;
                        <span class="label label-success">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling].BoxesNotStarted)
                        </span>
                    </td>
                </tr>

                }
                @if (Model.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].PiecesRemaining > 0 || Model.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling].BoxesRemaining > 0)
                {
                <tr class="active">
                    <th>In Progress</th>
                    <td class="text-right h4">
                        <span class="label label-info">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].PiecesRemaining)
                        </span>
                        &nbsp;
                        <span class="label label-success">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling].PiecesRemaining)
                        </span>
                    </td>
                    <td class="text-right">
                        <span class="label label-info">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].BoxesRemaining)
                        </span>
                        &nbsp;
                        <span class="label label-success">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling].BoxesRemaining)
                        </span>
                    </td>
                </tr>
                }
                @if (Model.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].PiecesComplete > 0 || Model.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling].BoxesComplete > 0)
                {
                <tr class="success">
                    <th>Complete</th>
                    <td class="text-right h4">
                        <span class="label label-info">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].PiecesComplete)
                        </span>
                        &nbsp;
                        <span class="label label-success">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling].PiecesComplete)
                        </span>
                    </td>
                    <td class="text-right h4">
                        <span class="label label-info">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].BoxesComplete)
                        </span>
                        &nbsp;
                        <span class="label label-success">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling].BoxesComplete)
                        </span>
                    </td>
                </tr>
                }
                @if (Model.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].PiecesCancelled > 0 || Model.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling].BoxesCancelled > 0)
                {
                <tr class="danger">
                    <th>Cancelled</th>
                    <td class="text-right h4">
                        <span class="label label-info">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].PiecesCancelled)
                        </span>
                        &nbsp;
                        <span class="label label-success">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling].PiecesCancelled)
                        </span>
                    </td>
                    <td class="text-right h4">
                        <span class="label label-info">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching].BoxesCancelled)
                        </span>
                        &nbsp;
                        <span class="label label-success">
                            @Html.DisplayFor(m => m.Activities2[DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling].BoxesCancelled)
                        </span>
                    </td>
                </tr>
                }
            </tbody>

            <tfoot>
                <tr class="active">
                    <th>
                        Total Completed
                    </th>
                    <td class="text-right">@Html.DisplayFor(m => m.PiecesToShip) of @Html.DisplayFor(m => m.OrderedPieces)</td>
                    <td class="text-right">
                        @if (Model.BoxesTotal > 0)
                        {

                        <span>@Html.DisplayFor(m => m.BoxesValidated) of @Html.DisplayFor(m => m.BoxesTotal)</span>

                        }
                        else
                        {
                        <strong class="text-info">
                            Boxes not created yet
                        </strong>
                        }

                    </td>

                </tr>
                @if (Model.PiecesRemaining > 0 || Model.BoxesRemaining > 0)
                {
                <tr>
                    <th>
                        Remaining
                    </th>
                    <th class="text-right">@Html.DisplayFor(m => m.PiecesRemaining)</th>
                    <th class="text-right">@Html.DisplayFor(m => m.BoxesRemaining)</th>
                </tr>
                }
                @if (Model.CancelledPieces > 0 || Model.BoxesCancelled > 0)
                {
                <tr>
                    <th>
                        Total Cancelled
                    </th>
                    <th class="text-right">@Html.DisplayFor(m => m.CancelledPieces)</th>
                    <th class="text-right">@Html.DisplayFor(m => m.BoxesCancelled)</th>
                </tr>
                }
            </tfoot>
        </table>

        
    </div>
    <div class="col-md-6">
        <div class="row">
            <div class="col-md-7">
                <h4 class="list-group-item-heading">
                    @Html.DisplayFor(m => m.CountPickslips) Pickslips
                    &bull; @Html.DisplayFor(m => m.CountPurchaseOrder) POs
                    <span class="badge"> DC Cancel @Html.DisplayFor(m => m.DcCancelDateRange)</span>
                </h4>
            </div>
            <div class="col-md-5">
                <div class="form-inline pull-right" role="form">
                    <div class="form-group">
                        <p class="form-control-static">
                            Priority
                            &nbsp;
                            @if (isAuthorized)
                            {
                                <div class="form-group">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-btn">
                                            <button class="btn btn-default decrease-priority" type="button" disabled="@(!isAuthorized)" title="Decrease priority"
                                                    data-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.DecrementPriority(Model.BucketId))">
                                                <span class="glyphicon glyphicon-arrow-down"></span>
                                            </button>
                                        </span>
                                        <input type="text" class="form-control" value="@Model.PriorityId" readonly size="1" style="text-align:right">
                                        <span class="input-group-btn">
                                            <button class="btn btn-default increase-priority" type="button" disabled="@(!isAuthorized)" title="Increase priority"
                                                    data-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.IncrementPriority(Model.BucketId))">
                                                <span class="glyphicon glyphicon-arrow-up"></span>
                                            </button>
                                        </span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                @Model.PriorityId
                            }
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- List group -->
        <div class="list-group">
            @if (Model.Activities.Count(p => !string.IsNullOrWhiteSpace(p.AreaId)) == 0)
            {


                <div class="list-group-item list-group-item-danger">Area is not decided yet for Pulling and Pitching</div>
            }
            @if (Model.RequiredBoxExpediting)
            {
                if (Model.BoxesTotal > 0 && !Model.IsFrozen)
                {

                    <a href="@Url.Action(MVC_PickWaves.PickWaves.BoxPickPallet.Index(Model.BucketId))"
                       class="list-group-item list-group-item-info">
                        Box Expediting  required <span class="glyphicon glyphicon-chevron-right pull-right"></span>
                    </a>

                }
                else
                {
                    <div class="list-group-item list-group-item-info"> Box Expediting  required</div>
                }
            }
            @if (Model.QuickPitch)
            {
                <div class="list-group-item list-group-item-info">Quick Pitching required</div>
            }

            @if (Model.CountNotAssignedSku > 0)
            {
                <div class="list-group-item list-group-item-info">
                    @Html.DisplayFor(m => m.CountNotAssignedSku) SKUs not assigned at any location
                </div>
            }

            @if (Model.BoxNotCreatedPieces > 0)
            {
                if (Model.IsFrozen)
                {
                    <div class="list-group-item list-group-item-info">
                        <strong>@string.Format("No Boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</strong>
                    </div>
                }
                else
                {
                    <div class="list-group-item list-group-item-danger">
                        @string.Format("No Boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)
                    </div>
                }
            }

            @if (Model.OverShippedPieces > 0)
            {
                <div class='list-group-item list-group-item-danger'>Overshipping @Html.DisplayFor(m => m.OverShippedPieces) pieces</div>
            }
        </div>

    </div>
</div>


