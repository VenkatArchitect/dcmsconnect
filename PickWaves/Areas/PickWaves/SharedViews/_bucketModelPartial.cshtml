@using DcmsMobile.PickWaves.Helpers
@model DcmsMobile.PickWaves.ViewModels.BucketModel
@{
    // To use this partial you must:
    // - Include _bucketModelModalPartial after your container div
    // - Include script _bucketModel.partial.js in your script bundle
    bool? obj = ViewBag.IsAuthorized;
    var isAuthorized = obj ?? false;  // Is the user authorized to edit
}

<div class="panel panel-success">
    <div class="panel-heading">

        <h3 class="list-group-item-heading" style="display:inline-block">
            Pick Wave <a title="Pick Wave Details"
                         href="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.Wave(new DcmsMobile.PickWaves.Areas.PickWaves.ManageWaves.WaveViewModel(Model.BucketId,
                                                                   DcmsMobile.PickWaves.Areas.PickWaves.ManageWaves.SuggestedNextActionType.BackTo)))">

                @Model.BucketId
            </a>
            <small>@Model.BucketName </small>
            @if (Model.IsFrozen)
            {
                <small class="badge"> <em>Frozen</em></small>
            }
        </h3>
        <small>Created @Html.DisplayFor(m => m.CreationDate) @Html.DisplayFor(m => m.CreatedBy)</small>
        @if (isAuthorized)
        {
            <div class="pull-right">
                @if (Model.IsFrozen)
                {

                    <a class="btn btn-default btn-sm"
                       href="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.EditableWave(new DcmsMobile.PickWaves.Areas.PickWaves.ManageWaves.WaveViewModel(
                                                            Model.BucketId,
                                                    DcmsMobile.PickWaves.Areas.PickWaves.ManageWaves.SuggestedNextActionType.CancelEditing)))">
                        <span class="glyphicon glyphicon-edit"></span> Edit
                    </a>
                }
                else
                {
                <!-- Button trigger modal -->
                    <button type="button" class="btn btn-default" data-toggle="modal" data-target="#freezeModal" data-bucketid="@Model.BucketId" data-countnotstartedboxes="@Model.CountNotStartedBoxes">
                        <span class="glyphicon glyphicon-ban-circle"></span> Freeze
                    </button>
                }
            </div>
        }


    </div>
    <div class="panel-body">
        <div class="row">
            <div class="col-md-6 ">
                <ul class="list-group">
                    <li class="list-group-item active">
                        <div class="row">
                            <div class="col-md-6">
                                <h4 class="list-group-item-heading">
                                    @Html.DisplayFor(m => m.CountValidatedBoxes) of @Html.DisplayFor(m => m.CountTotalBoxes) boxes Validated

                                </h4>

                                <p class="list-group-item-text">
                                    @if (Model.CountCancelledBoxes > 0)
                                    {

                                        <strong>
                                            @Html.DisplayFor(m => m.CountCancelledBoxes) boxes cancelled
                                        </strong>

                                    }
                                    @if (Model.CountNotStartedBoxes > 0)
                                    {
                                        <span>
                                            @Html.DisplayFor(m => m.CountNotStartedBoxes) boxes not started
                                        </span>
                                    }
                                </p>
                            </div>

                            <div class="col-md-6">

                                <div class="form-inline" role="form">
                                    <div class="form-group">
                                        <label class="sr-only">Email</label>
                                        <p class="form-control-static"> Priority</p>
                                    </div>
                                    @if (isAuthorized)
                                    {
                                        <div class="form-group">
                                            <div class="input-group input-group-sm">
                                                <span class="input-group-btn">
                                                    <button class="btn btn-default decrease-priority" type="button" disabled="@(!isAuthorized)" title="Decrease priority"
                                                            data-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.DecrementPriority(Model.BucketId))">
                                                        <span class="glyphicon glyphicon-arrow-down">
                                                        </span>
                                                    </button>
                                                </span>
                                                <input type="text" class="form-control" value="@Model.PriorityId" readonly size="2" style="text-align:right">
                                                <span class="input-group-btn">
                                                    <button class="btn btn-default increase-priority" type="button" disabled="@(!isAuthorized)" title="Increase priority"
                                                            data-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.IncrementPriority(Model.BucketId))">
                                                        <span class="glyphicon glyphicon-arrow-up"></span>
                                                    </button>
                                                </span>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        @Model.PriorityId}
                                </div>
                            </div>
                        </div>
                    </li>
                    <li class="list-group-item">
                        @if (Model.UnderPickedPieces.HasValue)
                        {
                            <strong title='Number of unpicked pieces in verified boxes' class="text-info">
                                @Html.DisplayFor(m => m.UnderPickedPieces) pieces underpicked
                            </strong>
                            <br />
                        }

                        @if (Model.CancelledPieces.HasValue)
                        {
                            <strong title='Number of pieces in cancelled boxes' class="text-info">
                                @Html.DisplayFor(m => m.CancelledPieces) pieces cancelled
                            </strong>
                            <br />
                        }
                        <h4 class="list-group-item-heading">
                            @Html.DisplayFor(m => m.CountPickslips) Pickslips
                            @if (isAuthorized && Model.IsFrozen)
                            {
                                <small>
                                    <a href="@Url.Action(MVC_PickWaves.PickWaves.CreateWave.Index(new DcmsMobile.PickWaves.Areas.PickWaves.CreateWave.IndexViewModel(Model.MaxCustomerId, Model.BucketId)))">
                                        Add more
                                    </a>
                                </small>
                            }
                            &bull; @Html.DisplayFor(m => m.CountPurchaseOrder) POs
                            <small>
                                @if (Model.RequiredBoxExpediting)
                                {
                                    <span class="text-info"> Required Box Expediting</span>
                                }
                                @if (Model.QuickPitch)
                                {
                                    <span class="text-info">&bull; Quick Pitching Required</span>
                                }
                            </small>
                        </h4>
                    </li>
                    @if (Model.CountNotAssignedSku > 0)
                    {
                        <li class="list-group-item list-group-item-danger">
                            @Html.DisplayFor(m => m.CountNotAssignedSku)
                        </li>
                    }


                </ul>



            </div>
            <div class="col-md-6">
                <ul class="list-group">
                    <li class="list-group-item active">
                        <span class="badge pull-right">DC Cancel @Html.DisplayFor(m => m.DcCancelDateRange)</span>
                        <h4 class="list-group-item-heading">
                            @Html.DisplayFor(m => m.OrderedPieces) Pieces Ordered
                            &bull; @Html.DisplayFor(m => m.PercentPiecesComplete) complete
                        </h4>
                    </li>
                    @if (Model.Activities.Count(p => !string.IsNullOrWhiteSpace(p.AreaId)) > 0)
                    {
                        for (var j = 0; j < Model.Activities.Count; j++)
                        {
                            if (!string.IsNullOrWhiteSpace(Model.Activities[j].AreaId) || Model.Activities[j].PiecesBoxesCreated > 0)
                            {
                                <li class="list-group-item list-group-item-@Html.Raw(Model.Activities[j].ActivityType == DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling ? "success" : "info")">
                                    <div class="row">
                                        <div class="col-md-5">
                                            @Html.DisplayFor(m => m.Activities[j].DisplayName)
                                            <strong>&nbsp; @Html.DisplayFor(m => m.Activities[j].AreaShortNameDisplay)</strong>
                                        </div>
                                        <div class="col-md-7">
                                            <div style="margin-bottom:0px;" class="progress" title="@Html.DisplayFor(m => m.Activities[j].PiecesComplete) of @Html.DisplayFor(m => m.Activities[j].PiecesToShip) pieces picked @Html.DisplayFor(m => m.Activities[j].PickingDateRange) . @Html.DisplayFor(m => m.Activities[j].PiecesIncomplete) pieces remaining">
                                                <div class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: @Model.Activities[j].PercentPiecesComplete%;">
                                                    @Html.DisplayFor(m => m.Activities[j].PiecesComplete)
                                                </div>
                                                @Html.DisplayFor(m => m.Activities[j].PiecesIncomplete)
                                            </div>
                                            <strong class="list-group-itemm-text text-danger">
                                                @if (Model.Activities[j].UnderPickedPieces.HasValue)
                                                {
                                                    <span> @Html.DisplayFor(m => m.Activities[j].UnderPickedPieces) under picked</span>
                                                }
                                                @if (Model.Activities[j].CancelledPieces.HasValue)
                                                {
                                                    <span>&bull; @Html.DisplayFor(m => m.Activities[j].CancelledPieces) cancelled</span>
                                                }
                                            </strong>
                                        </div>
                                    </div>
                                </li>
                            }
                        }
                        if (Model.BoxNotCreatedPieces > 0)
                        {
                            if (Model.IsFrozen)
                            {
                                <li class="list-group-item text-info"><strong>@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</strong></li>
                            }
                            else
                            {
                                <li class="list-group-item list-group-item-danger">@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</li>
                            }
                        }
                        @Html.DisplayFor(m => m.OverShippedPieces)

                    }
                    else
                    {
                        <li class="list-group-item list-group-item-danger">Area is not decided yet for pulling and/ pitching</li>
                    }

                </ul>
            </div>
        </div>
    </div>
</div>

