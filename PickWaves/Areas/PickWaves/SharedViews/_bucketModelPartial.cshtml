<!--This document is HTML5 Validated by "W3C Markup Validation Service" at http://validator.w3.org/ on 15 Dec 2014 by apanwar-->
@model DcmsMobile.PickWaves.ViewModels.BucketModel
@{
    // To use this partial you must:
    // - Include _bucketModelModalPartial after your container div
    // - Include script _bucketModel.partial.js in your script bundle
    bool? obj = ViewBag.IsAuthorized;
    var isAuthorized = obj ?? false;  // Is the user authorized to edit

    // Do not show link to the viewer page if we are already on the viewer page. Instead link to edit page
    //var isViewerPage = Url.Action(MVC_PickWaves.PickWaves.ManageWaves.WavePickslips(Model.BucketId)) == Request.Url.PathAndQuery;
}


@*@helper BucketActivityVerb(DcmsMobile.PickWaves.Helpers.BucketActivityType actType)
    {

        switch (actType)
        {
            case DcmsMobile.PickWaves.Helpers.BucketActivityType.NotSet:
                @:NotSet
                break;

            case DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching:
            @:Pitched
                break;

            case DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling:
            @:Pulled
                break;

            default:
            @:Unexpected

                break;
        }

    }*@

<div class="row">
    <div class="col-md-6 ">
        <ul class="list-group">
            <li class="list-group-item active">
                <div class="row">
                    <div class="col-md-6">
                        <h4 class="list-group-item-heading">
                            @Html.DisplayFor(m => m.CountValidatedBoxes) of @Html.DisplayFor(m => m.CountTotalBoxes) Boxes complete

                        </h4>

                        <p class="list-group-item-heading">

                            @if (Model.CountCancelledBoxes > 0)
                            {

                                <span>
                                    @Html.DisplayFor(m => m.CountCancelledBoxes)
                                    boxes cancelled
                                </span>


                            }
                            @if (Model.CountNotStartedBoxes > 0)
                            {
                                <span>
                                    &bull; @Html.DisplayFor(m => m.CountNotStartedBoxes) boxes not started
                                </span>
                            }
                        </p>
                    </div>

                    <div class="col-md-6">

                        <div class="form-inline" role="form">
                            <div class="form-group">
                                <p class="form-control-static">
                                    Priority
                                    &nbsp;
                                    @if (isAuthorized)
                                    {
                                        <div class="form-group">
                                            <div class="input-group input-group-sm">
                                                <span class="input-group-btn">
                                                    <button class="btn btn-default decrease-priority" type="button" disabled="@(!isAuthorized)" title="Decrease priority"
                                                            data-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.DecrementPriority(Model.BucketId))">
                                                        <span class="glyphicon glyphicon-arrow-down"></span>
                                                    </button>
                                                </span>
                                                <input type="text" class="form-control" value="@Model.PriorityId" readonly size="2" style="text-align:right">
                                                <span class="input-group-btn">
                                                    <button class="btn btn-default increase-priority" type="button" disabled="@(!isAuthorized)" title="Increase priority"
                                                            data-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.IncrementPriority(Model.BucketId))">
                                                        <span class="glyphicon glyphicon-arrow-up"></span>
                                                    </button>
                                                </span>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        @Model.PriorityId
                                    }
                                </p>
                            </div>



                        </div>
                    </div>
                </div>
            </li>
            <li class="list-group-item">
                <h4 class="list-group-item-heading">
                    @Html.DisplayFor(m => m.CountPickslips) Pickslips
                    &bull; @Html.DisplayFor(m => m.CountPurchaseOrder) POs
                    <small>
                        @if (Model.RequiredBoxExpediting)
                        {

                            if (Model.CountTotalBoxes > 0 && !Model.IsFrozen)
                            {
                                <a href="@Url.Action(MVC_PickWaves.PickWaves.BoxPickPallet.Index(Model.BucketId))">Box Expediting  required</a>
                            }
                            else
                            {
                                <span class="text-success"> Box Expediting  required</span>
                            }
                        }
                        @if (Model.QuickPitch)
                        {
                            <span class="text-success">&bull; Quick Pitching required</span>
                        }

                        @if (Model.UnderPickedPieces.HasValue)
                        {
                            <strong title='Number of unpicked pieces in verified boxes' class="text-danger">
                                &bull; @Html.DisplayFor(m => m.UnderPickedPieces) pieces underpicked
                            </strong>

                        }

                    </small>

                </h4>

            </li>
            @if (Model.CountNotAssignedSku > 0)
            {
                <li class="list-group-item list-group-item-danger">
                    @Html.DisplayFor(m => m.CountNotAssignedSku)
                </li>
            }


        </ul>
    </div>
    <div class="col-md-6">
        <ul class="list-group">
            <li class="list-group-item active">
                <span class="badge pull-right">
                    DC Cancel @Html.DisplayFor(m => m.DcCancelDateRange)
                </span>
                <h4 class="list-group-item-heading">
                    @Html.DisplayFor(m => m.OrderedPieces) Pieces Ordered
                    &bull; @Html.DisplayFor(m => m.PercentPiecesComplete) complete
                </h4>
                <ul class="list-inline">
                    @if (Model.PiecesRemaining > 0)
                    {

                        <li>@Html.DisplayFor(m => m.PiecesRemaining) pieces remaining</li>

                    }
                    @if (Model.CancelledPieces > 0)
                    {
                        <li> @Html.DisplayFor(m => m.CancelledPieces) pieces cancelled</li>

                    }

                </ul>
            </li>
            <li class="list-group-item">
                @if (Model.Activities.Count(p => !string.IsNullOrWhiteSpace(p.AreaId)) > 0)
                {
                    for (var j = 0; j < Model.Activities.Count; j++)
                    {
                        if (!string.IsNullOrWhiteSpace(Model.Activities[j].AreaId) || Model.Activities[j].PiecesBoxesCreated > 0)
                        {
                            //class="list-group-item list-group-item-@Html.Raw(Model.Activities[j].ActivityType == DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling ? "success" : "info")"
                            <table class="table table-condensed bg-@Html.Raw(Model.Activities[j].ActivityType == DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling ? "success" : "info")">
                                <caption>
                                    @Html.DisplayFor(m => m.Activities[j].DisplayName)
                                    <strong>&nbsp; @Html.DisplayFor(m => m.Activities[j].AreaShortNameDisplay)</strong>
                                </caption>
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Pieces</th>
                                        <th>Boxes</th>
                                    </tr>
                                </thead>
                                <tr>
                                    <th>Remaining</th>
                                    <td class="text-right">@Html.DisplayFor(m => m.Activities[j].PiecesRemaining)</td>
                                    <td>TODO</td>
                                </tr>
                                <tr>
                                    <th>Complete</th>
                                    <td class="text-right">@Html.DisplayFor(m => m.Activities[j].PiecesComplete)</td>
                                    <td class="text-right">@Html.DisplayFor(m => m.Activities[j].CountBoxesComplete)</td>
                                </tr>
                                <tr class="danger">
                                    <th>Cancelled</th>
                                    <td class="text-right">@Html.DisplayFor(m => m.Activities[j].PiecesCancelled)</td>
                                    <td class="text-right">@Html.DisplayFor(m => m.Activities[j].CountBoxesCancelled)</td>
                                </tr>

                            </table>
                        }
                    }
                    if (Model.BoxNotCreatedPieces > 0)
                    {
                        if (Model.IsFrozen)
                        {
                            <div class="list-group-item text-info"><strong>@string.Format("No Boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</strong></div>
                        }
                        else
                        {
                            <div class="list-group-item list-group-item-danger">@string.Format("No Boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</div>
                        }
                    }
                    @Html.DisplayFor(m => m.OverShippedPieces)

                }
                else
                {
                    <div class="list-group-item list-group-item-danger">Area is not decided yet for Pulling and Pitching</div>
                }
            </li>

        </ul>
    </div>
</div>


