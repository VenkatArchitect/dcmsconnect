@using DcmsMobile.PickWaves.Helpers
@model DcmsMobile.PickWaves.ViewModels.BucketModel
@{
    var obj = ViewBag.IsEditable;
    var isEditable = obj != null && (bool)obj;
}


<div class="row @(Model.IsFrozen ? "text-muted" : (string)null)">
    <h3 class="list-group-item-heading" style="text-align:center">
        <mark>
            <u>@Html.DisplayFor(m => m.BucketId): @Html.DisplayFor(m => m.BucketName)</u>
            @if (Model.IsFrozen)
            {
                <small class="badge"> <em>Frozen</em></small>
            }
        </mark>
    </h3>
    


    <div class="col-md-4">
        <h4 class="list-group-item-heading text-info" title="@Html.DisplayFor(m => m.PiecesComplete) of @Html.DisplayFor(m => m.PiecesToShip) picked">
            @Html.DisplayFor(m => m.OrderedPieces) <small>Pieces Ordered</small>
            &bull; @Html.DisplayFor(m => m.PercentPiecesComplete) <small>complete</small>
        </h4>
        <p class="list-group-item-text">
            @Html.DisplayFor(m => m.UnderPickedPieces)
            @Html.DisplayFor(m => m.CancelledPieces)


            DC Cancel @Html.DisplayFor(m => m.DcCancelDateRange)

            &bull; <small>Priority</small>
            <span data-increase-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.IncrementPriority(Model.BucketId))"
                  data-decrease-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.DecrementPriority(Model.BucketId))">
                @if (isEditable && Model.BucketState != ProgressStage.Completed)
                {
                <span class="glyphicon glyphicon-arrow-down" title="Decrease priority"></span>
                @Html.DisplayFor(m => m.PriorityId)
                <span class="glyphicon glyphicon-arrow-up" title="Increase priority"></span>
                }
                else
                {

                <span class="span-Priority"> @Html.DisplayFor(m => m.PriorityId)</span>
                }
            </span>


            &bull; @Html.DisplayFor(m => m.CountPickslips)
            <small>Pickslips</small>


            &bull; @Html.DisplayFor(m => m.CountPurchaseOrder)
            <small>POs</small>
        </p>
        <p class="list-group-item-text">
            Created on @Html.DisplayFor(m => m.CreationDate) &bull; by <small>@Html.DisplayFor(m => m.CreatedBy)</small>
        </p>
        <p class="list-group-item-text">
            @if (Model.RequiredBoxExpediting)
            {
                <small class="text-info">&bull; Required Box Expediting</small>
            }
            @if (Model.QuickPitch)
            {
                <small class="text-info">&bull; Quick Pitching Required</small>
            }
            @if (Model.CountNotAssignedSku > 0)
            {
                <small class="bg-danger">@Html.DisplayFor(m => m.CountNotAssignedSku)</small>
            }

        </p>
    </div>

    <div class="col-md-8">
        <h4 class="list-group-item-heading text-info">
            @Html.DisplayFor(m => m.CountValidatedBoxes) <small> of</small> @Html.DisplayFor(m => m.CountTotalBoxes) <small>boxes Validated</small>
            @if (Model.CountCancelledBoxes > 0)
            {

                <span>&bull; @Html.DisplayFor(m => m.CountCancelledBoxes)</span><small> boxes cancelled</small>

            }
            @if (Model.CountNotStartedBoxes > 0)
            {
                <span class="ui-progressbar-value" data-boxstate="@((int)BoxState.NotStarted)" data-activity="@((int)BucketActivityType.NotSet)">
                    @Html.DisplayFor(m => m.CountNotStartedBoxes) <small>boxes not started</small>
                </span>
            }
        </h4>
        @if (Model.Activities.Count(p => !string.IsNullOrWhiteSpace(p.AreaId)) > 0)
        {
            for (var i = 0; i < Model.Activities.Count; i++)
            {
                if (!string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) || Model.Activities[i].PiecesBoxesCreated > 0)
                {

                    <p class='list-group-item-text'>
                        <div class="row">
                            <div class="col-md-8">
                                <span class="label label-@Html.Raw(Model.Activities[i].ActivityType == BucketActivityType.Pulling ? "success" : "info")">
                                    @Html.DisplayFor(m => m.Activities[i].DisplayName)
                                </span><!--Pitching or pulling-->
                                <!---------ie: FDC-FPK: Forword pick area of FDC------------->
                                <strong>&nbsp; @Html.DisplayFor(m => m.Activities[i].AreaShortNameDisplay): </strong>
                                <small>@Model.Activities[i].AreaDescription</small>
                                <!---------------------->
                            </div>
                            <div class="col-md-4">
                                @Html.Partial(MVC_PickWaves.PickWaves.SharedViews.Views._activityProgressPartial, Model.Activities[i])
                                @if (Model.Activities[i].ActivityType == BucketActivityType.Pitching && string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) && isEditable)
                                {
                                    <span>
                                        &bull; To minimize the number of pieces to be pitched,
                                        <!--Where this edit link goes?-->
                                        <a href="#" class="edit-wave">
                                            Edit
                                        </a>and save the pick wave.
                                    </span>

                                }
                            </div>
                        </div>
                    </p>
                }
            }

            if (Model.BoxNotCreatedPieces > 0)
            {
                if (Model.IsFrozen)
                {
                    <small class="bg-info">@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</small>
                }
                else
                {
                    <small class="bg-danger">@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</small>
                }
            }
            @Html.DisplayFor(m => m.OverShippedPieces)
        }
        else
        {
            <span class="bg-danger">Area is not decided yet for pulling and/ pitching</span>
        }
    </div>

</div>








@*<ul class="list-group @(Model.IsFrozen ? "text-muted" : (string)null)">

        <li class="list-group-item list-group-item-success">
            <h4 class="list-group-item-heading" style="text-align:center">
                Pick Wave - @Html.DisplayFor(m => m.BucketId)
                @if (Model.IsFrozen)
                {
                    <small> <em>Frozen</em></small>
                }
                @Html.DisplayFor(m => m.BucketName)
            </h4>
        </li>
        <li class="list-group-item">
            <div class="row">
                <div class="col-md-6">
                    <h4 class="list-group-item-heading" title="@Html.DisplayFor(m => m.PiecesComplete) of @Html.DisplayFor(m => m.PiecesToShip) picked">
                        @Html.DisplayFor(m => m.OrderedPieces) <small>Pieces Ordered</small>
                        &bull; @Html.DisplayFor(m => m.PercentPiecesComplete) <small>complete</small>
                    </h4>
                    @*<div class="progress" style="margin-bottom:0px;">
                            <div class="progress-bar" role="progressbar" aria-valuenow="@Html.DisplayFor(m => m.PercentPiecesComplete)" aria-valuemin="0"
                                  aria-valuemax="100" style="width:@Html.DisplayFor(m => m.PercentPiecesComplete)%; min-width:40px;">
                                @Html.DisplayFor(m => m.PercentPiecesComplete) complete
                            </div>
                        </div>

                    <p class="list-group-item-text">
                        @Html.DisplayFor(m => m.UnderPickedPieces)
                        @Html.DisplayFor(m => m.CancelledPieces)


                        DC Cancel @Html.DisplayFor(m => m.DcCancelDateRange)

                        &bull; <small>Priority</small>
                        <span data-increase-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.IncrementPriority(Model.BucketId))"
                              data-decrease-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.DecrementPriority(Model.BucketId))">
                            @if (isEditable && Model.BucketState != ProgressStage.Completed)
                            {
                                <span class="glyphicon glyphicon-arrow-down" title="Decrease priority"></span>
                                @Html.DisplayFor(m => m.PriorityId)
                                <span class="glyphicon glyphicon-arrow-up" title="Increase priority"></span>
                            }
                            else
                            {

                                <span class="span-Priority"> @Html.DisplayFor(m => m.PriorityId)</span>
                            }
                        </span>


                        &bull; @Html.DisplayFor(m => m.CountPickslips)
                        <small>Pickslips</small>


                        &bull; @Html.DisplayFor(m => m.CountPurchaseOrder)
                        <small>POs</small>
                    </p>


                    <p class="list-group-item-text">
                        Created on @Html.DisplayFor(m => m.CreationDate) by <small>&bull; @Html.DisplayFor(m => m.CreatedBy)</small>
                        <br />
                        @if (Model.RequiredBoxExpediting)
                        {
                            <strong><em>&bull; Required Box Expediting</em></strong>
                        }
                        @if (Model.QuickPitch)
                        {
                            <strong><em>&bull; Quick Pitching Required</em></strong>
                        }
                        @if (Model.CountNotAssignedSku > 0)
                        {
                            <div>@Html.DisplayFor(m => m.CountNotAssignedSku)</div>
                        }
                    </p>
                </div>
                <div class="col-md-6">
                    <h4 class="list-group-item-heading">
                        @Html.DisplayFor(m => m.CountValidatedBoxes) <small> of</small> @Html.DisplayFor(m => m.CountTotalBoxes) <small>boxes Validated</small>
                        @if (Model.CountCancelledBoxes > 0)
                        {

                            <span>&bull; @Html.DisplayFor(m => m.CountCancelledBoxes)</span><small> boxes cancelled</small>

                        }
                        @if (Model.CountNotStartedBoxes > 0)
                        {
                            <span class="ui-progressbar-value" data-boxstate="@((int)BoxState.NotStarted)" data-activity="@((int)BucketActivityType.NotSet)">
                                @Html.DisplayFor(m => m.CountNotStartedBoxes) <small>boxes not started</small>
                            </span>
                        }

                    </h4>
                    @if (Model.Activities.Count(p => !string.IsNullOrWhiteSpace(p.AreaId)) > 0)
                    {
                        for (var i = 0; i < Model.Activities.Count; i++)
                        {
                            if (!string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) || Model.Activities[i].PiecesBoxesCreated > 0)
                            {

                                <p class='list-group-item-text'>
                                    <span class="label label-@Html.Raw(Model.Activities[i].ActivityType == BucketActivityType.Pulling ? "success" : "info")">
                                        @Html.DisplayFor(m => m.Activities[i].DisplayName)
                                    </span><!--Pitching or pulling-->
                                    <!---------ie: FDC-FPK: Forword pick area of FDC------------->
                                    <strong>@Html.DisplayFor(m => m.Activities[i].AreaShortNameDisplay):</strong>
                                    <small>@Model.Activities[i].AreaDescription</small>
                                    <!---------------------->
                                    @Html.Partial(MVC_PickWaves.PickWaves.SharedViews.Views._activityProgressPartial, Model.Activities[i])
                                    @if (Model.Activities[i].ActivityType == BucketActivityType.Pitching && string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) && isEditable)
                                    {
                                        <span>
                                            &bull; To minimize the number of pieces to be pitched,
                                            <!--Where this edit link goes?-->
                                            <a href="#" class="edit-wave">
                                                Edit
                                            </a>and save the pick wave.
                                        </span>

                                    }
                                </p>
                            }
                        }

                        if (Model.BoxNotCreatedPieces > 0)
                        {
                            if (Model.IsFrozen)
                            {
                                <span class="bg-info">@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</span>
                            }
                            else
                            {
                                <span class="bg-danger">@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</span>
                            }
                        }
                        @Html.DisplayFor(m => m.OverShippedPieces)
                    }
                    else
                    {
                        <span class="bg-danger">Area is not decided yet for pulling and/ pitching</span>
                    }


                </div>



            </div>
        </li>
    </ul>*@













@*<div class="col-md-6">

            <h4 class="list-group-item-heading" >

                    @Html.DisplayFor(m => m.CountValidatedBoxes) of @Html.DisplayFor(m => m.CountTotalBoxes) boxes Validated

                @if (Model.CountCancelledBoxes > 0)
                {
                    <em>
                        @Html.DisplayFor(m => m.CountCancelledBoxes) boxes cancelled
                    </em>
                }
                @if (Model.CountNotStartedBoxes > 0)
                {
                    <span data-activity="@((int)BucketActivityType.NotSet)">
                        <em class="ui-progressbar-value" data-boxstate="@((int)BoxState.NotStarted)">
                            @Html.DisplayFor(m => m.CountNotStartedBoxes) boxes not started
                        </em>
                    </span>
                }
            </h4>

            @if (Model.Activities.Count(p => !string.IsNullOrWhiteSpace(p.AreaId)) > 0)
            {
                for (var i = 0; i < Model.Activities.Count; i++)
                {
                    if (!string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) || Model.Activities[i].PiecesBoxesCreated > 0)
                    {
                        <div class='@Html.Raw(Model.Activities[i].ActivityType == BucketActivityType.Pulling ? "pulled-box" : "pitched-box")' style="padding-top: 0.5em;padding-bottom: 0.5em">
                            <span style="width: 12em; display: inline-block; white-space: nowrap; max-width: 12em">
                                <em>@Html.DisplayFor(m => m.Activities[i].DisplayName)</em>
                                <strong><span title="@Model.Activities[i].AreaDescription">@Html.DisplayFor(m => m.Activities[i].AreaShortNameDisplay)</span></strong>
                            </span>
                            @Html.Partial(MVC_PickWaves.PickWaves.SharedViews.Views._activityProgressPartial, Model.Activities[i])
                            @if (Model.Activities[i].ActivityType == BucketActivityType.Pitching && string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) && isEditable)
                            {
                                <div>
                                    To minimize the number of pieces to be pitched,
                                    <a href="#" class="edit-wave">
                                        Edit
                                    </a>and save the pick wave
                                </div>

                            }
                        </div>
                    }
                }
                if (Model.BoxNotCreatedPieces > 0)
                {
                    if (Model.IsFrozen)
                    {
                        <span>@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</span>
                    }
                    else
                    {
                        <span class="ui-state-error">@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</span>
                    }
                }
                @Html.DisplayFor(m => m.OverShippedPieces)
            }
            else
            {
                <div class="ui-state-error">Area is not decided yet for pulling and/ pitching</div>
            }

        </div>
    </div>*@




























@*<div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title">
                <span class="@(Model.IsFrozen ? "text-muted" : (string)null)">
                    Pick Wave - @Html.DisplayFor(m => m.BucketId)

                    @if (Model.IsFrozen)
                    {
                        <small>  <em>Frozen</em></small>
                    }
                    @Html.DisplayFor(m => m.BucketName)
                </span>
            </h4>
        </div>
        <div class="panel-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="h3">
                        <span style="font-size: 1.2em" title="@Html.DisplayFor(m => m.PiecesComplete) of @Html.DisplayFor(m => m.PiecesToShip) picked">
                            @Html.DisplayFor(m => m.OrderedPieces) Pieces Ordered &bull; @Html.DisplayFor(m => m.PercentPiecesComplete)
                        </span> complete
                        <div style="font-weight: normal; font-style: italic">
                            @Html.DisplayFor(m => m.UnderPickedPieces)
                            <span style="padding-left: 2em">
                                @Html.DisplayFor(m => m.CancelledPieces)
                            </span>
                        </div>
                    </div>
                    <div class="div-bucket" style="white-space:nowrap"
                         data-increase-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.IncrementPriority(Model.BucketId))"
                         data-decrease-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.DecrementPriority(Model.BucketId))">
                        <span>
                            DC Cancel <em>@Html.DisplayFor(m => m.DcCancelDateRange)</em>
                        </span>&bull;
                        @if (isEditable && Model.BucketState != ProgressStage.Completed)
                        {
                            <span>Priority </span>
                            <span class="ui-icon ui-icon-arrowthick-1-s" style="display: inline-block" title="Decrease priority"></span>
                            <span class="span-Priority" style="font-weight: bold">@Html.DisplayFor(m => m.PriorityId)</span>
                            <span class="ui-icon ui-icon-arrowthick-1-n" style="display: inline-block" title="Increase priority"></span>
                        }
                        else
                        {
                            <span>Priority </span>
                            <span class="span-Priority" style="font-weight: bold">@Html.DisplayFor(m => m.PriorityId)</span>
                        }
                        &bull; <strong>@Html.DisplayFor(m => m.CountPickslips)</strong> Pickslips &bull; <strong>@Html.DisplayFor(m => m.CountPurchaseOrder)</strong> POs
                    </div>
                    @if (Model.RequiredBoxExpediting)
                    {    <hr />
                        <strong><em>Required Box Expediting</em></strong>
                    }
                    @if (Model.QuickPitch)
                    {    <hr />
                        <strong><em>Quick Pitching Required</em></strong>
                    }
                    @if (Model.CountNotAssignedSku > 0)
                    {
                        <div>@Html.DisplayFor(m => m.CountNotAssignedSku)</div>
                    }
                    <div>Pick Wave Created on @Html.DisplayFor(m => m.CreationDate) by @Html.DisplayFor(m => m.CreatedBy)</div>
                </div>
                <div class="col-md-6">
                    <div class="h3">
                        <div style="font-size: 1.2em">
                            @Html.DisplayFor(m => m.CountValidatedBoxes) of @Html.DisplayFor(m => m.CountTotalBoxes) boxes Validated
                        </div>
                        @if (Model.CountCancelledBoxes > 0)
                        {
                            <span style="font-weight: normal; font-style: italic">
                                @Html.DisplayFor(m => m.CountCancelledBoxes) boxes cancelled
                            </span>
                        }
                        @if (Model.CountNotStartedBoxes > 0)
                        {
                            <span style="font-weight: normal;font-style: italic; padding-left:2em" data-activity="@((int)BucketActivityType.NotSet)">
                                <span class="ui-progressbar-value" data-boxstate="@((int)BoxState.NotStarted)">
                                    @Html.DisplayFor(m => m.CountNotStartedBoxes) boxes not started
                                </span>
                            </span>
                        }
                    </div>

                    @if (Model.Activities.Count(p => !string.IsNullOrWhiteSpace(p.AreaId)) > 0)
                    {
                        for (var i = 0; i < Model.Activities.Count; i++)
                        {
                            if (!string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) || Model.Activities[i].PiecesBoxesCreated > 0)
                            {
                                <div class='@Html.Raw(Model.Activities[i].ActivityType == BucketActivityType.Pulling ? "pulled-box" : "pitched-box")' style="padding-top: 0.5em;padding-bottom: 0.5em">
                                    <span style="width: 12em; display: inline-block; white-space: nowrap; max-width: 12em">
                                        <em>@Html.DisplayFor(m => m.Activities[i].DisplayName)</em>
                                        <strong><span title="@Model.Activities[i].AreaDescription">@Html.DisplayFor(m => m.Activities[i].AreaShortNameDisplay)</span></strong>
                                    </span>
                                    @Html.Partial(MVC_PickWaves.PickWaves.SharedViews.Views._activityProgressPartial, Model.Activities[i])
                                    @if (Model.Activities[i].ActivityType == BucketActivityType.Pitching && string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) && isEditable)
                                    {
                                        <div>
                                            To minimize the number of pieces to be pitched,
                                            <a href="#" class="edit-wave">
                                                Edit
                                            </a>and save the pick wave
                                        </div>

                                    }
                                </div>
                            }
                        }
                        if (Model.BoxNotCreatedPieces > 0)
                        {
                            if (Model.IsFrozen)
                            {
                                <span>@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</span>
                            }
                            else
                            {
                                <span class="ui-state-error">@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</span>
                            }
                        }
                        @Html.DisplayFor(m => m.OverShippedPieces)
                    }
                    else
                    {
                        <div class="ui-state-error">Area is not decided yet for pulling and/ pitching</div>
                    }

                </div>
            </div>

        </div>
    </div>*@
@*<table class="bucketmodel-display">
        <caption @Html.Raw(Model.IsFrozen ? "class='ui-state-disabled' title='This pick wave is frozen'" : "")>
            Pick Wave - <span style="font-size: 1.3em">@Html.DisplayFor(m => m.BucketId)</span>
            <span @Html.Raw("class='isFrozen" + (Model.IsFrozen ? "" : " ui-helper-hidden") + "'")>(Frozen)</span>
            <span class="@(Model.IsFrozen ? "ui-state-disabled" : "") bucket-name">
                @Html.DisplayFor(m => m.BucketName)
            </span>
        </caption>
        <thead>
            <tr>
                <td style="text-align: center">
                    <span style="font-size: 1.2em" title="@Html.DisplayFor(m => m.PiecesComplete) of @Html.DisplayFor(m => m.PiecesToShip) picked">
                        @Html.DisplayFor(m => m.OrderedPieces) Pieces Ordered &bull; @Html.DisplayFor(m => m.PercentPiecesComplete)
                    </span> complete
                    <div style="font-weight: normal; font-style: italic">
                        @Html.DisplayFor(m => m.UnderPickedPieces)
                        <span style="padding-left: 2em">
                            @Html.DisplayFor(m => m.CancelledPieces)
                        </span>
                    </div>
                </td>
                <td style="text-align: center">
                    <div style="font-size: 1.2em">
                        @Html.DisplayFor(m => m.CountValidatedBoxes) of @Html.DisplayFor(m => m.CountTotalBoxes) boxes Validated
                    </div>
                    @if (Model.CountCancelledBoxes > 0)
                    {
                        <span style="font-weight: normal; font-style: italic">
                            @Html.DisplayFor(m => m.CountCancelledBoxes) boxes cancelled
                        </span>
                    }
                    @if (Model.CountNotStartedBoxes > 0)
                    {
                        <span style="font-weight: normal;font-style: italic; padding-left:2em" data-activity="@((int)BucketActivityType.NotSet)">
                            <span class="ui-progressbar-value" data-boxstate="@((int)BoxState.NotStarted)">
                                @Html.DisplayFor(m => m.CountNotStartedBoxes) boxes not started
                            </span>
                        </span>
                    }
                </td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="vertical-align: top; padding-top: 1mm">
                    <div class="div-bucket" style="white-space:nowrap"
                         data-increase-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.IncrementPriority(Model.BucketId))"
                         data-decrease-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.DecrementPriority(Model.BucketId))">
                        <span>
                            DC Cancel <em>@Html.DisplayFor(m => m.DcCancelDateRange)</em>
                        </span>&bull;
                        @if (isEditable && Model.BucketState != ProgressStage.Completed)
                        {
                            <span>Priority </span>
                            <span class="ui-icon ui-icon-arrowthick-1-s" style="display: inline-block" title="Decrease priority"></span>
                            <span class="span-Priority" style="font-weight: bold">@Html.DisplayFor(m => m.PriorityId)</span>
                            <span class="ui-icon ui-icon-arrowthick-1-n" style="display: inline-block" title="Increase priority"></span>
                        }
                        else
                        {
                            <span>Priority </span>
                            <span class="span-Priority" style="font-weight: bold">@Html.DisplayFor(m => m.PriorityId)</span>
                        }
                        &bull; <strong>@Html.DisplayFor(m => m.CountPickslips)</strong> Pickslips &bull; <strong>@Html.DisplayFor(m => m.CountPurchaseOrder)</strong> POs
                    </div>
                    @if (Model.RequiredBoxExpediting)
                    {    <hr />
                        <strong><em>Required Box Expediting</em></strong>
                    }
                    @if (Model.QuickPitch)
                    {    <hr />
                        <strong><em>Quick Pitching Required</em></strong>
                    }
                    @if (Model.CountNotAssignedSku > 0)
                    {
                        <div>@Html.DisplayFor(m => m.CountNotAssignedSku)</div>
                    }
                    <div>Pick Wave Created on @Html.DisplayFor(m => m.CreationDate) by @Html.DisplayFor(m => m.CreatedBy)</div>
                </td>

                <td>
                    @if (Model.Activities.Count(p => !string.IsNullOrWhiteSpace(p.AreaId)) > 0)
                    {
                        for (var i = 0; i < Model.Activities.Count; i++)
                        {
                            if (!string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) || Model.Activities[i].PiecesBoxesCreated > 0)
                            {
                                <div class='@Html.Raw(Model.Activities[i].ActivityType == BucketActivityType.Pulling ? "pulled-box" : "pitched-box")' style="padding-top: 0.5em;padding-bottom: 0.5em">
                                    <span style="width: 12em; display: inline-block; white-space: nowrap; max-width: 12em">
                                        <em>@Html.DisplayFor(m => m.Activities[i].DisplayName)</em>
                                        <strong><span title="@Model.Activities[i].AreaDescription">@Html.DisplayFor(m => m.Activities[i].AreaShortNameDisplay)</span></strong>
                                    </span>
                                    @Html.Partial(MVC_PickWaves.PickWaves.SharedViews.Views._activityProgressPartial, Model.Activities[i])
                                    @if (Model.Activities[i].ActivityType == BucketActivityType.Pitching && string.IsNullOrWhiteSpace(Model.Activities[i].AreaId) && isEditable)
                                    {
                                        <div>
                                            To minimize the number of pieces to be pitched,
                                            <a href="#" class="edit-wave">
                                                Edit
                                            </a>and save the pick wave
                                        </div>

                                    }
                                </div>
                            }
                        }
                        if (Model.BoxNotCreatedPieces > 0)
                        {
                            if (Model.IsFrozen)
                            {
                                <span>@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</span>
                            }
                            else
                            {
                                <span class="ui-state-error">@string.Format("No boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</span>
                            }
                        }
                        @Html.DisplayFor(m => m.OverShippedPieces)
                    }
                    else
                    {
                        <div class="ui-state-error">Area is not decided yet for pulling and/ pitching</div>
                    }
                </td>
            </tr>
        </tbody>
        @if (!string.IsNullOrEmpty(Model.BucketComment))
        {
            <tfoot>
                <tr style="border: solid 1px black">
                    <td colspan="2">
                        <strong>@Html.DisplayFor(m => m.BucketComment)</strong>
                    </td>
                </tr>
            </tfoot>
        }
    </table>*@
