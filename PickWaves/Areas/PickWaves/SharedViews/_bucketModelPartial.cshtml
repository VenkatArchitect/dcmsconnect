<!--This document is HTML5 Validated by "W3C Markup Validation Service" at http://validator.w3.org/ on 15 Dec 2014 by apanwar-->
@model DcmsMobile.PickWaves.ViewModels.BucketModel
@{
    // To use this partial you must:
    // - Include _bucketModelModalPartial after your container div
    // - Include script _bucketModel.partial.js in your script bundle
    bool? obj = ViewBag.IsAuthorized;
    var isAuthorized = obj ?? false;  // Is the user authorized to edit

    // Do not show link to the viewer page if we are already on the viewer page. Instead link to edit page
    //var isViewerPage = Url.Action(MVC_PickWaves.PickWaves.ManageWaves.WavePickslips(Model.BucketId)) == Request.Url.PathAndQuery;
}

<div class="panel panel-success">
    <div class="panel-heading">

        @if (Model.Flags.HasFlag(DcmsMobile.PickWaves.ViewModels.BucketModelFlags.ShowEditMenu) && isAuthorized)
        {
            if (Model.IsFrozen)
            {
                <div class="btn-group pull-right" role="group"
                     data-toggle="tooltip"
                     data-placement="top"
                     title="Unfreeze or Edit">

                    <button class="btn btn-default dropdown-toggle" type="button"
                            id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                        <span class="glyphicon glyphicon-list"></span>
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                        <li role="presentation">
                            <form action="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.UnfreezeBucket())" method="post" style="text-align:center; margin:1mm">
                                @if (Model.BoxNotCreatedPieces.HasValue)
                                {
                                    <span>This will create Boxes for @Html.DisplayFor(m => m.BoxNotCreatedPieces) pieces</span>
                                }
                                <button class="btn btn-info" name="@MVC_PickWaves.PickWaves.ManageWaves.UnfreezeBucketParams.bucketId"
                                        value="@Model.BucketId" type="submit">
                                    <span class="glyphicon glyphicon-play"></span>
                                    Unfreeze
                                </button>
                            </form>
                        </li>
                        <li class="divider"></li>
                        <li role="presentation">
                            <div style="text-align:center; margin:1mm">
                                <a href="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.WaveEditor(Model.BucketId))" class="btn btn-link"
                                   role="menuitem" tabindex="-1">
                                    Edit
                                </a>
                            </div>
                        </li>
                    </ul>
                </div>
            }
            else
            {
                <div class="btn-group pull-right" role="group" data-toggle="tooltip"
                     data-placement="top"
                     title="Freeze,Edit or both">
                    <button class="btn btn-default dropdown-toggle" type="button" title="Freeze,Edit or both"
                            id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                        <span class="glyphicon glyphicon-list"></span>
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                        <li role="presentation">
                            <form action="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.FreezeBucket())" method="post" style="text-align:center; margin:1mm">
                                <span>
                                    Pick Wave can not be processed till it is frozen.
                                    <br />
                                    @*<small>
                                            <em>
                                                <strong>@Model.CountNotStartedBoxes</strong>
                                                Boxes assigned to this Pick Wave, which are not picked will be deleted and will be available for other pick waves.
                                            </em>
                                        </small>*@
                                </span>
                                <br />
                                <button class="btn btn-warning"
                                        name="@MVC_PickWaves.PickWaves.ManageWaves.FreezeBucketParams.bucketId"
                                        value="@Model.BucketId" type="submit">
                                    <span class="glyphicon glyphicon-pause"></span>
                                    Freeze
                                </button>
                            </form>
                        </li>
                        <li class="divider"></li>
                        <li role="presentation">
                            <form action="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.FreezeAndEditBucket())" method="post" style="text-align:center; margin:1mm">

                                <button class="btn btn-link" name="@MVC_PickWaves.PickWaves.ManageWaves.FreezeAndEditBucketParams.bucketId" value="@Model.BucketId"
                                        type="submit">
                                    Freeze and Edit
                                </button>
                            </form>

                        </li>
                    </ul>
                </div>
            }

        }




        <h3 class="list-group-item-heading">
            Pick Wave
            @if (Model.Flags.HasFlag(DcmsMobile.PickWaves.ViewModels.BucketModelFlags.HideViewerLink))
            {
                @Html.DisplayFor(m => m.BucketId)
            }
            else
            {
                <a title="Pick Wave Details"
                   href="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.WavePickslips(Model.BucketId))">

                    @Html.DisplayFor(m => m.BucketId)
                </a>
            }
            <small>
                @Model.BucketName
                @if (Model.IsFrozen)
                {
                    <em class="badge">Frozen</em>
                }
                <span style="font-size:0.8em">Created @Html.DisplayFor(m => m.CreationDate) by @Html.DisplayFor(m => m.CreatedBy)</span>
            </small>
        </h3>


    </div>



    <div class="panel-body">
        <div class="row">
            <div class="col-md-6 ">
                <ul class="list-group">
                    <li class="list-group-item active">
                        <div class="row">
                            <div class="col-md-6">
                                <h4 class="list-group-item-heading">
                                    @Html.DisplayFor(m => m.CountValidatedBoxes) of @Html.DisplayFor(m => m.CountTotalBoxes) Boxes validated

                                </h4>

                                <p class="list-group-item-text">
                                    @if (Model.CountCancelledBoxes > 0)
                                    {

                                        <strong>
                                            @Html.DisplayFor(m => m.CountCancelledBoxes) Boxes cancelled
                                        </strong>

                                    }
                                    @if (Model.CountNotStartedBoxes > 0)
                                    {
                                        <span>
                                            @Html.DisplayFor(m => m.CountNotStartedBoxes) Boxes not started
                                        </span>
                                    }
                                </p>
                            </div>

                            <div class="col-md-6">

                                <div class="form-inline" role="form">
                                    <div class="form-group">
                                        <p class="form-control-static">
                                            Priority
                                            &nbsp;
                                            @if (isAuthorized)
                                            {
                                                <div class="form-group">
                                                    <div class="input-group input-group-sm">
                                                        <span class="input-group-btn">
                                                            <button class="btn btn-default decrease-priority" type="button" disabled="@(!isAuthorized)" title="Decrease priority"
                                                                    data-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.DecrementPriority(Model.BucketId))">
                                                                <span class="glyphicon glyphicon-arrow-down"></span>
                                                            </button>
                                                        </span>
                                                        <input type="text" class="form-control" value="@Model.PriorityId" readonly size="2" style="text-align:right">
                                                        <span class="input-group-btn">
                                                            <button class="btn btn-default increase-priority" type="button" disabled="@(!isAuthorized)" title="Increase priority"
                                                                    data-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.IncrementPriority(Model.BucketId))">
                                                                <span class="glyphicon glyphicon-arrow-up"></span>
                                                            </button>
                                                        </span>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                @Model.PriorityId
                                            }
                                        </p>
                                    </div>



                                </div>
                            </div>
                        </div>
                    </li>
                    <li class="list-group-item">
                        @if (Model.UnderPickedPieces.HasValue)
                        {
                            <strong title='Number of unpicked pieces in verified boxes' class="text-info">
                                @Html.DisplayFor(m => m.UnderPickedPieces) pieces underpicked
                            </strong>
                            <br />
                        }

                        @if (Model.CancelledPieces.HasValue)
                        {
                            <strong title='Number of pieces in cancelled boxes' class="text-info">
                                @Html.DisplayFor(m => m.CancelledPieces) pieces cancelled
                            </strong>
                            <br />
                        }
                        <h4 class="list-group-item-heading">
                            @Html.DisplayFor(m => m.CountPickslips) Pickslips
                            @if (isAuthorized && Model.IsFrozen)
                            {
                                <small>
                                    <a href="@Url.Action(MVC_PickWaves.PickWaves.CreateWave.Index(customerId: Model.CustomerId, lastBucketId: Model.BucketId))">
                                        Add more
                                    </a>
                                </small>
                            }
                            &bull; @Html.DisplayFor(m => m.CountPurchaseOrder) POs
                            <small>
                                @if (Model.RequiredBoxExpediting)
                                {

                                    if (Model.CountTotalBoxes > 0 && !Model.IsFrozen)
                                    {
                                        <a href="@Url.Action(MVC_PickWaves.PickWaves.BoxPickPallet.Index(Model.BucketId))">Box Expediting  required</a>
                                    }
                                    else
                                    {
                                        <span class="text-success"> Box Expediting  required</span>
                                    }
                                }
                                @if (Model.QuickPitch)
                                {
                                    <span class="text-success">&bull; Quick Pitching required</span>
                                }
                            </small>
                        </h4>

                    </li>
                    @if (Model.CountNotAssignedSku > 0)
                    {
                        <li class="list-group-item list-group-item-danger">
                            @Html.DisplayFor(m => m.CountNotAssignedSku)
                        </li>
                    }


                </ul>
            </div>
            <div class="col-md-6">
                <ul class="list-group">
                    <li class="list-group-item active">
                        <span class="badge pull-right">
                            DC Cancel @Html.DisplayFor(m => m.DcCancelDateRange)
                        </span>
                        <h4 class="list-group-item-heading">
                            @Html.DisplayFor(m => m.OrderedPieces) Pieces Ordered
                            &bull; @Html.DisplayFor(m => m.PercentPiecesComplete) complete
                        </h4>
                    </li>
                    @if (Model.Activities.Count(p => !string.IsNullOrWhiteSpace(p.AreaId)) > 0)
                    {
                        for (var j = 0; j < Model.Activities.Count; j++)
                        {
                            if (!string.IsNullOrWhiteSpace(Model.Activities[j].AreaId) || Model.Activities[j].PiecesBoxesCreated > 0)
                            {
                                <li class="list-group-item list-group-item-@Html.Raw(Model.Activities[j].ActivityType == DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling ? "success" : "info")">
                                    <div class="row">
                                        <div class="col-md-5">
                                            @Html.DisplayFor(m => m.Activities[j].DisplayName)
                                            <strong>&nbsp; @Html.DisplayFor(m => m.Activities[j].AreaShortNameDisplay)</strong>
                                            <div>
                                                @Html.DisplayFor(m => m.Activities[j].CountBoxes) Boxes
                                            </div>
                                        </div>
                                        <div class="col-md-7">
                                            @Html.DisplayFor(m => m.Activities[j].PiecesIncomplete) pieces remaining
                                            <div style="margin-bottom:3px;" class="progress" title="@Html.DisplayFor(m => m.Activities[j].PiecesComplete) of @Html.DisplayFor(m => m.Activities[j].PiecesToShip) pieces picked @Html.DisplayFor(m => m.Activities[j].PickingDateRange) . @Html.DisplayFor(m => m.Activities[j].PiecesIncomplete) pieces remaining">
                                                <div style="width: @Model.Activities[j].PercentPiecesComplete%; overflow:visible; padding-left:1mm" class="progress-bar progress-bar-info">
                                                    <span style="white-space:nowrap" class="text-info">
                                                        @Html.DisplayFor(m => m.Activities[j].PiecesComplete)
                                                        of @Html.DisplayFor(m => m.Activities[j].PiecesToShip) pieces picked
                                                        @Html.DisplayFor(m => m.Activities[j].PickingDateRange).
                                                        <em>
                                                            @Model.Activities[j].PercentPiecesComplete% picked
                                                        </em>
                                                    </span>
                                                </div>
                                            </div>
                                            <strong class="list-group-itemm-text text-danger">
                                                @if (Model.Activities[j].UnderPickedPieces.HasValue)
                                                {
                                                    <span> @Html.DisplayFor(m => m.Activities[j].UnderPickedPieces) under picked</span>
                                                }
                                                @if (Model.Activities[j].CancelledPieces.HasValue)
                                                {
                                                    <span>&bull; @Html.DisplayFor(m => m.Activities[j].CancelledPieces) cancelled</span>
                                                }
                                            </strong>
                                        </div>
                                    </div>
                                </li>
                            }
                        }
                        if (Model.BoxNotCreatedPieces > 0)
                        {
                            if (Model.IsFrozen)
                            {
                                <li class="list-group-item text-info"><strong>@string.Format("No Boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</strong></li>
                            }
                            else
                            {
                                <li class="list-group-item list-group-item-danger">@string.Format("No Boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</li>
                            }
                        }
                        @Html.DisplayFor(m => m.OverShippedPieces)

                    }
                    else
                    {
                        <li class="list-group-item list-group-item-danger">Area is not decided yet for Pulling and Pitching</li>
                    }

                </ul>
            </div>
        </div>
    </div>
</div>
