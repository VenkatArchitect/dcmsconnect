<!--This document is HTML5 Validated by "W3C Markup Validation Service" at http://validator.w3.org/ on 15 Dec 2014 by apanwar-->
@model DcmsMobile.PickWaves.ViewModels.BucketModel
@{
    // To use this partial you must:
    // - Include _bucketModelModalPartial after your container div
    // - Include script _bucketModel.partial.js in your script bundle
    bool? obj = ViewBag.IsAuthorized;
    var isAuthorized = obj ?? false;  // Is the user authorized to edit

    // Do not show link to the viewer page if we are already on the viewer page. Instead link to edit page
    //var isViewerPage = Url.Action(MVC_PickWaves.PickWaves.ManageWaves.WavePickslips(Model.BucketId)) == Request.Url.PathAndQuery;
}


@*@helper BucketActivityVerb(DcmsMobile.PickWaves.Helpers.BucketActivityType actType)
    {

        switch (actType)
        {
            case DcmsMobile.PickWaves.Helpers.BucketActivityType.NotSet:
                @:NotSet
                break;

            case DcmsMobile.PickWaves.Helpers.BucketActivityType.Pitching:
            @:Pitched
                break;

            case DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling:
            @:Pulled
                break;

            default:
            @:Unexpected

                break;
        }

    }*@

<div class="row">
    <div class="col-md-4">
        <ul class="list-inline">
            <li>
                @Html.DisplayFor(m => m.CountPickslips) Pickslips
                &bull; @Html.DisplayFor(m => m.CountPurchaseOrder) POs
            </li>
            <li>
                DC Cancel @Html.DisplayFor(m => m.DcCancelDateRange)
            </li>
            <li>
                @if (Model.CountTotalBoxes > 0)
                {
                    <text>
                        @Html.DisplayFor(m => m.CountValidatedBoxes) of @Html.DisplayFor(m => m.CountTotalBoxes) Boxes complete
                    </text>
                }
                else
                {
                    <text>
                        Boxes not created yet
                    </text>
                }
            </li>
            @if (Model.CountCancelledBoxes > 0)
            {
                <li>
                    @Html.DisplayFor(m => m.CountCancelledBoxes)
                    boxes cancelled
                </li>
            }
            @if (Model.CountNotStartedBoxes > 0)
            {
                <li>
                    @Html.DisplayFor(m => m.CountNotStartedBoxes) boxes not started
                </li>
            }
            @if (Model.QuickPitch)
            {
                <li>Quick Pitching required</li>
            }
            @if (Model.RequiredBoxExpediting)
            {
                <li>
                    @if (Model.CountTotalBoxes > 0 && !Model.IsFrozen)
                    {

                        <a href="@Url.Action(MVC_PickWaves.PickWaves.BoxPickPallet.Index(Model.BucketId))">Box Expediting  required</a>
                    }
                    else
                    {
                        <span> Box Expediting  required</span>
                    }
                </li>
            }
            @if (Model.UnderPickedPieces.HasValue)
            {
                <li>
                    <strong title='Number of unpicked pieces in verified boxes' class="text-danger">
                        @Html.DisplayFor(m => m.UnderPickedPieces) pieces underpicked
                    </strong>
                </li>

            }

            @if (Model.CountNotAssignedSku > 0)
            {
                <li>
                    @Html.DisplayFor(m => m.CountNotAssignedSku) SKUs not assigned at any location
                </li>
            }
            <li>
                <div class="form-inline" role="form">
                    <div class="form-group">
                        <p class="form-control-static">
                            Priority
                            &nbsp;
                            @if (isAuthorized)
                            {
                                <div class="form-group">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-btn">
                                            <button class="btn btn-default decrease-priority" type="button" disabled="@(!isAuthorized)" title="Decrease priority"
                                                    data-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.DecrementPriority(Model.BucketId))">
                                                <span class="glyphicon glyphicon-arrow-down"></span>
                                            </button>
                                        </span>
                                        <input type="text" class="form-control" value="@Model.PriorityId" readonly size="2" style="text-align:right">
                                        <span class="input-group-btn">
                                            <button class="btn btn-default increase-priority" type="button" disabled="@(!isAuthorized)" title="Increase priority"
                                                    data-priority-url="@Url.Action(MVC_PickWaves.PickWaves.ManageWaves.IncrementPriority(Model.BucketId))">
                                                <span class="glyphicon glyphicon-arrow-up"></span>
                                            </button>
                                        </span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                @Model.PriorityId
                            }
                        </p>
                    </div>
                </div>
            </li>
        </ul>
    </div>
    <div class="col-md-8">
        <table class="table table-bordered table-condensed">
            <thead>
                <tr>
                    <th>@Html.DisplayFor(m => m.PercentPiecesComplete) complete</th>
                    <th>Pieces</th>
                    <th>Boxes</th>
                </tr>
            </thead>
            @for (var j = 0; j < Model.Activities.Count; j++)
            {
                <tbody>
                    <tr class="text-center @Html.Raw(Model.Activities[j].ActivityType == DcmsMobile.PickWaves.Helpers.BucketActivityType.Pulling ? "success" : "info")">
                        <td colspan=" 3">
                            @Html.DisplayFor(m => m.Activities[j].DisplayName)
                            <strong>&nbsp; @Html.DisplayFor(m => m.Activities[j].AreaShortNameDisplay)</strong>
                        </td>
                    </tr>
                    <tr>
                        <th>Not Started</th>
                        <td class="text-right">TODO</td>
                        <td>TODO</td>
                    </tr>
                    <tr class="active">
                        <th>In Progress</th>
                        <td class="text-right">@Html.DisplayFor(m => m.Activities[j].PiecesRemaining)</td>
                        <td>TODO</td>
                    </tr>
                    <tr class="success">
                        <th>Complete</th>
                        <td class="text-right">@Html.DisplayFor(m => m.Activities[j].PiecesComplete)</td>
                        <td class="text-right">@Html.DisplayFor(m => m.Activities[j].CountBoxesComplete)</td>
                    </tr>
                    <tr class="danger">
                        <th>Cancelled</th>
                        <td class="text-right">@Html.DisplayFor(m => m.Activities[j].PiecesCancelled)</td>
                        <td class="text-right">@Html.DisplayFor(m => m.Activities[j].CountBoxesCancelled)</td>
                    </tr>
                </tbody>
            }
            <tfoot>
                <tr>
                    <td colspan="3">
                        Totals here
                    </td>
                </tr>
                <tr>
                    <th>
                        Remaining
                    </th>
                    <th class="text-right">@Html.DisplayFor(m => m.PiecesRemaining)</th>
                    <th>TODO</th>
                </tr>
                <tr>
                    <th>
                        Cancelled
                    </th>
                    <th class="text-right">@Html.DisplayFor(m => m.CancelledPieces)</th>
                    <th>TODO</th>
                </tr>
            </tfoot>
        </table>
        @if (Model.BoxNotCreatedPieces > 0)
        {
            if (Model.IsFrozen)
            {
                <div class="list-group-item text-info"><strong>@string.Format("No Boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</strong></div>
            }
            else
            {
                <div class="list-group-item list-group-item-danger">@string.Format("No Boxes for {0:N0} pieces", Model.BoxNotCreatedPieces)</div>
            }
        }
        @Html.DisplayFor(m => m.OverShippedPieces)

        @if (Model.Activities.Count(p => !string.IsNullOrWhiteSpace(p.AreaId)) == 0)
        {
            <div class="list-group-item list-group-item-danger">Area is not decided yet for Pulling and Pitching</div>
        }
    </div>
</div>
