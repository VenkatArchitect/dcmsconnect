@model DcmsMobile.PickWaves.ViewModels.CreateWave.IndexViewModel
@{
    ViewBag.Title = string.Format("Create Pick Waves for {0} {1}", Model.CustomerName, Model.CustomerId);
    Layout = @MVC_PickWaves.PickWaves.SharedViews.Views._layoutPickWaves2;
}
@*@section sidebar {

        <div class="boxContent">
            @Html.ActionLink("All Pick Waves", MVC_PickWaves.PickWaves.Home.Customer(Model.CustomerId)) of <em>@Html.DisplayFor(m => m.CustomerName) (@Html.DisplayFor(m => m.CustomerId))</em>
        </div>
        <div class="boxContent">
            @Html.ActionLink("Change Customer", MVC_PickWaves.PickWaves.Home.Index())
        </div>
    }*@
@helper OptionAttributes(SelectListItem item, int? selectedIndex)
{
    @:value="@item.Value"


    if (string.IsNullOrWhiteSpace(item.Value))
    {
        @:disabled="disabled"
    }
    else
    {
        if (selectedIndex != null && item.Value == selectedIndex.ToString())
        {
            @:selected="selected"
        }
    }
}

<div class="container">

    <div class="well well-sm">
        @if (Model.LastBucketId == null)
        {
            <fieldset>
                <legend>Create New Pick Wave</legend>

                <form class="form-horizontal" role="form">
                    @if (Model.PullAreas.Count > 0)
            {
                <div class="form-group">
                    <label for="ddlPullFrom" class="col-sm-2 control-label">Pull From</label>
                    <div class="col-sm-7">
                        @Html.DropDownListFor(m => m.PullAreaId, Model.PullAreas, "(Decide Later)", new
               {
                   @class = "form-control",
                   id = "ddlPullFrom"
               })
                    </div>
                    <div class="col-sm-3">
                        <div class="checkbox">
                            <label>
                                <input type="checkbox" checked="@Model.RequiredBoxExpediting" value="True" name="@Html.NameFor(m => m.RequiredBoxExpediting)">
                                Require Box Expediting
                            </label>
                        </div>
                    </div>
                </div>
            }
                    @if (Model.PitchAreas.Count > 0)
            {
                <div class="form-group">
                    <label for="ddlPitchFrom" class="col-sm-2 control-label">Pull From</label>
                    <div class="col-sm-7">
                        @Html.DropDownListFor(m => m.PitchAreaId, Model.PitchAreas, "(Decide Later)", new
               {
                   @class = "form-control",
                   id = "ddlPitchFrom"
               })
                    </div>
                    <div class="col-sm-3">
                        <div class="checkbox">
                            <label>
                                <input type="checkbox" checked="@Model.QuickPitch" value="True" name="@Html.NameFor(m => m.QuickPitch)">
                                Quick Pitch
                            </label>
                        </div>
                    </div>
                </div>
            }
                </form>
            </fieldset>
        }
        else
        {
            <fieldset>
                <legend>
                    Pick Wave @Html.DisplayFor(m => m.LastBucketId) <small>
                        @Html.ActionLink("View", MVC_PickWaves.PickWaves.ManageWaves.Wave(
            new DcmsMobile.PickWaves.ViewModels.ManageWaves.WaveViewModel
                (Model.LastBucketId.Value, DcmsMobile.PickWaves.ViewModels.ManageWaves.SuggestedNextActionType.UnfreezeMe))) /
                        @Html.ActionLink("Edit", MVC_PickWaves.PickWaves.ManageWaves.EditableWave(
            new DcmsMobile.PickWaves.ViewModels.ManageWaves.WaveViewModel
             (Model.LastBucketId.Value, DcmsMobile.PickWaves.ViewModels.ManageWaves.SuggestedNextActionType.CancelEditing)))
                    </small>
                </legend>
                <p>This pick wave contains <span class="h4">@Html.DisplayFor(m => m.PickslipCount) pickslips</span>. Continue adding pickslips below.</p>
                <dl class="dl-horizontal">
                    <dt>Pull From</dt>
                    <dd>@Html.DisplayFor(m => m.PullAreaShortName)</dd>
                    <dt>Pitch From</dt>
                    <dd>@Html.DisplayFor(m => m.PitchAreaShortName)</dd>
                </dl>
            </fieldset>
        }
        <fieldset>
            <legend>Add Pickslips</legend>
            <p>You will add groups of pickslips to a pick wave.</p>
            <form action="@Url.Action(MVC_PickWaves.PickWaves.CreateWave.Index())" method="get" class="form-inline">
                @Html.HiddenFor(m => m.CustomerId)
                <p class="form-control-static">Pickslips of Vwh</p>
                @Html.DropDownListFor(m => m.VwhId, Model.VwhList, new
   {
       @class = "form-control"
   })

                @Html.HiddenFor(m => m.RowDimIndex, new
   {
       id = "hfRowDim"
   })
                <p class="form-control-static">Grouped By</p>
                <select name="@Html.NameFor(m => m.ColDimIndex)" class="form-control">
                    @foreach (var item in Model.ColDimensionList)
                    {
                        <option @OptionAttributes(item, Model.ColDimIndex)>
                            @item.Text
                        </option>
                    }
                </select>
                <button type="submit" class="btn btn-default">Apply</button>
            </form>
        </fieldset>
    </div>
    <div role="tabpanel">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation">
                <form class="form-inline">
                    <select class="form-control" id="ddlRowDim">
                        @foreach (var item in Model.RowDimensionList)
                        {
                            <option @OptionAttributes(item, Model.RowDimIndex)>@item.Text</option>
                        }
                    </select>
                    &nbsp;
                </form>
            </li>
            @for (var i = 0; i < Model.Rows.Count; ++i)
            {
                <li role="presentation" class="@(i == 0 ? "active" : null)">
                    <a href="@("#content_" + i.ToString())" aria-controls="@("content_" + i.ToString())" role="tab" data-toggle="tab">
                        @Model.Rows[i].DimensionDisplayValue
                    </a>
                </li>
            }
        </ul>
        <!-- Tab panes -->
        <div class="tab-content">
            @for (var i = 0; i < Model.Rows.Count; ++i)
            {
                <div role="tabpanel" class="tab-pane @(i == 0 ? "active" : null)" id="@("content_" + i.ToString())">
                    <div class="panel panel-default" style="margin-left:1mm">
                        <div class="panel-heading">@Model.RowDimDisplayName @Model.Rows[i].DimensionDisplayValue</div>
                        <div class="panel-body">
                            <ul class="list-group">
                                @foreach (var item in Model.Rows[i].PickslipCounts)
                                {
                                    <li class="list-group-item">
                                        <div class="row">
                                            <div class="col-md-4">
                                                @Model.ColDimDisplayName @item.Key
                                            </div>
                                            <div class="col-md-4">
                                                <a href="@Url.Action(MVC_PickWaves.PickWaves.CreateWave.PickslipList(new DcmsMobile.PickWaves.ViewModels.CreateWave.PickslipListViewModel
                                        {
                                            BucketId = Model.LastBucketId,
                                            CustomerId = Model.CustomerId,
                                            VwhId = Model.VwhId,
                                            RowDimIndex = Model.RowDimIndex,
                                            ColDimIndex = Model.ColDimIndex,
                                            RowDimVal = Model.Rows[i].DimensionValue,
                                            ColDimVal = item.Key
                                        }))">@item.Value&nbsp; pickslips</a>
                                    </div>
                                    <div class="col-md-4">
                                        <form role="form" action="@Url.Action(MVC_PickWaves.PickWaves.CreateWave.AddPickslipsOfDim())" method="post">
                                            @Html.HiddenFor(m => m.LastBucketId)
                                            @Html.HiddenFor(m => m.CustomerId)
                                            @Html.HiddenFor(m => m.VwhId)
                                            @Html.HiddenFor(m => m.RowDimIndex)
                                            @Html.HiddenFor(m => m.ColDimIndex)
                                            <input type="hidden" name="@Html.NameFor(m => m.RowDimVal)" value="@Model.Rows[i].DimensionValue" />
                                            <input type="hidden" name="@Html.NameFor(m => m.ColDimVal)" value="@item.Key" />
                                            <button type="submit" class="btn btn-default pull-right">Add @Model.Rows[i].OrderedPieces[item.Key] pcs</button>
                                        </form>
                                    </div>
                                </div>
                            </li>
                                }
                            </ul>
                        </div>
                    </div>

                </div>
            }

        </div>
    </div>

</div>

<fieldset>
    <legend style="font-size: 1.2em; font-weight : bold;">Add Pickslips</legend>

    @using (Html.BeginForm(MVC_PickWaves.PickWaves.CreateWave.AddPickslipsOfDim(), FormMethod.Post, new
        {
            id = "frmMain"
        }))
    {
        <input type="hidden" name="@Model.NameFor(m => m.LastBucketId)" value="@Model.LastBucketId" />
        @*<input type="hidden" name="@MVC_PickWaves.PickWaves.CreateWave.AddPickslipsOfDimParams.viewPickslips" id="hfViewPickslips" />*@
        if (Model.LastBucketId.HasValue)
        {
            <blockquote>
                Continue clicking on pickslip counts to add multiple pickslips to the pick wave.
            </blockquote>
            <div>
                <span style="font-size: 1.2em; font-weight: bold;">Pick Wave @Html.DisplayFor(m => m.LastBucketId) </span>
                @Html.ActionLink("View", MVC_PickWaves.PickWaves.ManageWaves.Wave(
            new DcmsMobile.PickWaves.ViewModels.ManageWaves.WaveViewModel
                (Model.LastBucketId.Value, DcmsMobile.PickWaves.ViewModels.ManageWaves.SuggestedNextActionType.UnfreezeMe))) /
                @Html.ActionLink("Edit", MVC_PickWaves.PickWaves.ManageWaves.EditableWave(
            new DcmsMobile.PickWaves.ViewModels.ManageWaves.WaveViewModel
             (Model.LastBucketId.Value, DcmsMobile.PickWaves.ViewModels.ManageWaves.SuggestedNextActionType.CancelEditing)))
                <br />
                <span class="ui-state-highlight" style="font-size: 1.2em;">#Pickslip : @Model.PickslipCount</span>
                @if (!string.IsNullOrWhiteSpace(Model.PullAreaShortName))
                {
                    <div>Pull from : <span style="font-size: 1.2em;">@Model.PullAreaShortName</span> </div>
                }
                @if (!string.IsNullOrWhiteSpace(Model.PitchAreaShortName))
                {
                    <div>Pitch from : <span style="font-size: 1.2em;">@Model.PitchAreaShortName</span> </div>
                }
            </div>
            if (Model.Rows.Count > 0)
            {
                @Html.ActionLink("Create New Wave", MVC_PickWaves.PickWaves.CreateWave.Index(new DcmsMobile.PickWaves.ViewModels.CreateWave.IndexViewModel(Model.CustomerId,
               Model.RowDimIndex.Value, Model.ColDimIndex.Value, Model.VwhId, Model.PullAreaId, Model.PitchAreaId, null)))
            }

        }
        else
        {
            if (Model.Rows.Count > 0)
            {
                <blockquote>
                    Begin creating a new Pick Wave by clicking on one of the pickslip counts in the table below.
                </blockquote>
                <table>
                    <tbody>
                        @if (Model.PullAreas.Count > 0)
                        {
                            <tr>
                                <td>
                                    Pull From
                                </td>
                                <td>
                                    @Html.DropDownListFor(m => m.PullAreaId, Model.PullAreas, "(Decide Later)")
                                </td>
                                <td>
                                    @Html.CheckBoxFor(m => m.RequiredBoxExpediting)
                                    @Html.LabelFor(m => m.RequiredBoxExpediting)
                                </td>
                            </tr>
                        }
                        @if (Model.PitchAreas.Count > 0)
                        {
                            <tr>
                                <td>
                                    Pitch From
                                </td>
                                <td>
                                    @Html.DropDownListFor(m => m.PitchAreaId, Model.PitchAreas, "(Decide Later)")
                                </td>
                                <td>
                                    @Html.CheckBoxFor(m => m.QuickPitch)
                                    @Html.LabelFor(m => m.QuickPitch)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }

    }
</fieldset>



@section script {
    @*<link type="text/css" href="@Links_PickWaves.Areas.PickWaves.CreateWave.CreateWave_Index_css" rel="stylesheet" />
        <script src="@Links_PickWaves.Areas.PickWaves.CreateWave.CreateWave_Index_js" type="text/javascript"></script>*@
    <script type="text/javascript">
        $(document).ready(function () {
            $('#ddlRowDim').on('change', function (e) {
                $('#hfRowDim').val($(e.target).val()).closest('form').submit();
            });
            //$('#navRowDim').on('click', 'li', function (e) {
            //    // Make sure that the associated content is visible
            //    var hrefHeading = $(e.target).attr('href');
            //    //alert(hrefHeading);
            //    var hrefContent = $('a', hrefHeading).attr('href');
            //    //alert(hrefContent);
            //    $(hrefContent).collapse('show');
            //});
        });
    </script>
}

