<!--This document is HTML5 Validated by "W3C Markup Validation Service" at http://validator.w3.org/ on 15 Dec 2014 by apanwar-->
@using DcmsMobile.PickWaves.Helpers
@model DcmsMobile.PickWaves.Areas.PickWaves.ManageWaves.WaveSkuListModel
@* Designed only for use by Wave.cshtml*@
@helper InventoryTdClass(DcmsMobile.PickWaves.ViewModels.BucketActivityModel activity, int? pcs)
{
    if (activity != null && activity.PiecesIncomplete > 0)
    {
        if (pcs == null || pcs < activity.PiecesIncomplete)
        {
            @:class='text-danger'
        }
        else
        {
            @:class='text-info'
    }
    }
}


<blockquote>
    @string.Format("SKUs List of wave {0}", Model.BucketId)
</blockquote>

<ul class="list-group">
    <li class="list-group-item active">
        <div class="row">
            <div class="col-md-5">
                <h4 class="list-group-item-heading">
                    SKU
                    <span class="label label-info">@Html.DisplayFor(m => m.TotalWeight) Weight / Dozen</span>
                    <span class="label label-success"> @Html.DisplayFor(m => m.TotalVolume) Volume / Dozen</span>
                    <abbr title="Virtual Wearhouse">VWH</abbr>
                </h4>

                <div title="@Html.DisplayFor(m => m.TotalPiecesPicked) of @Html.DisplayFor(m => m.TotalOrderedPieces) pieces picked, Still @Html.DisplayFor(m => m.RemainingPiecesToPick) pieces to pick.">

                    @Html.DisplayFor(m => m.RemainingPiecesToPick) Picked Pieces
                    <div class="progress" style="margin-bottom:0"
                         title="@Html.DisplayFor(m => m.TotalPiecesPicked) of @Html.DisplayFor(m => m.TotalOrderedPieces) pieces picked, Still @Html.DisplayFor(m => m.RemainingPiecesToPick) pieces to pick.">
                        <div style="width:@Model.PercentPiecesComplete%; overflow:visible; padding-left:1mm" class="progress-bar progress-bar-info">
                            <span style="white-space:nowrap" class="text-info">
                                @Html.DisplayFor(m => m.TotalPiecesPicked) of @Html.DisplayFor(m => m.TotalOrderedPieces) pieces picked &bull; <em>@Model.PercentPiecesComplete% picked</em>
                            </span>
                        </div>
                    </div>
                </div>

            </div>
            <div class="col-md-6">

                @foreach (var area in Model.AllAreas)
                {
                    <div style="width:12em; display:inline-block; line-height:0.8; margin-bottom:3mm">
                        <label>
                            <span>@area.BuildingId</span>-<span>@area.ShortName</span>
                            @if (!string.IsNullOrEmpty(area.ReplenishAreaId))
                            {
                                <small title="Replenish from @area.ReplenishAreaId">
                                    &larr;@area.ReplenishAreaId
                                </small>
                            }
                        </label>
                        <small>@area.Description</small>
                    </div>
                }

            </div>
            <div class="col-md-1">
                <span class="badge pull-right">Ordered<br /> Pieces</span>
            </div>
        </div>
    </li>

    @for (var i = 0; i < Model.BucketSkuList.Count; ++i)
    {
        <li class="list-group-item">
            <div>
                <span class="badge pull-right">@Html.DisplayFor(m => m.BucketSkuList[i].OrderedPieces)</span>
                <h4>
                    <small>@(i + 1)</small>

                    @Html.DisplayFor(m => m.BucketSkuList[i].DisplaySku)

                    <span class="label label-info" title="Weight Per Dozen">@Html.DisplayFor(m => m.BucketSkuList[i].WeightPerDozen)</span>
                    <span class="label label-success" title="Volume Per Dozan">@Html.DisplayFor(m => m.BucketSkuList[i].VolumePerDozen)</span>
                    @Html.DisplayFor(m => m.BucketSkuList[i].VwhId)

                </h4>
            </div>
            <div class="row">
                <div class="col-md-5">


                    @if (Model.BucketSkuList[i].Activities.Count > 0)
                    {
                        for (var j = 0; j < Model.BucketSkuList[i].Activities.Count; ++j)
                        {
                            <div class='alert alert-@Html.Raw(Model.BucketSkuList[i].Activities[j].ActivityType == BucketActivityType.Pulling ? "success" : "info")'>
                                <div>
                                    @Html.DisplayFor(m => m.BucketSkuList[i].Activities[j].DisplayName)
                                    @Html.DisplayFor(m => m.BucketSkuList[i].Activities[j].PickingDateRange)
                                    <em>@Model.BucketSkuList[i].Activities[j].PercentPiecesComplete%</em>
                                </div>
                                <div class="progress" style="margin-bottom:0">
                                    <div style="width: @Model.BucketSkuList[i].Activities[j].PercentPiecesComplete%" class="progress-bar progress-bar-success">
                                        <span style="white-space:nowrap">
                                            @Html.DisplayFor(m => m.BucketSkuList[i].Activities[j].PiecesComplete)
                                        </span>
                                    </div>
                                    <div class="progress-bar progress-bar-warning" style="width:  @Model.BucketSkuList[i].Activities[j].PercentPiecesIncomplete%">
                                        @Html.DisplayFor(m => m.BucketSkuList[i].Activities[j].PiecesIncomplete)
                                    </div>
                                </div>
                                @if (Model.BucketSkuList[i].Activities[j].UnderPickedPieces.HasValue || Model.BucketSkuList[i].Activities[j].CancelledPieces.HasValue)
                                {
                                    <ul class="list-inline">
                                        @if (Model.BucketSkuList[i].Activities[j].UnderPickedPieces.HasValue)
                                        {
                                            <li class="list-group-item list-group-item-danger"> @Html.DisplayFor(m => m.BucketSkuList[i].Activities[j].UnderPickedPieces) Under picked</li>
                                        }
                                        @if (Model.BucketSkuList[i].Activities[j].CancelledPieces.HasValue)
                                        {
                                            <li class="list-group-item list-group-item-danger">@Html.DisplayFor(m => m.BucketSkuList[i].Activities[j].CancelledPieces) Cancelled</li>
                                        }
                                    </ul>
                                }
                            </div>

                        }
                    }
                    else
                    {
                        <div>
                            Not picked or pulled yet
                        </div>
                    }


                </div>

                <div class="col-md-7">

                    @{
        var hasInventory = false;
                    }
                    @for (var j = 0; j < Model.AllAreas.Count; ++j)
                    {
                        if (Model.BucketSkuList[i].InventoryByArea != null && Model.BucketSkuList[i].InventoryByArea[j].InventoryPieces != null)
                        {
                            hasInventory = true;
                            var activity = Model.BucketSkuList[i].Activities.FirstOrDefault(p => p.AreaId == Model.BucketSkuList[i].InventoryByArea[j].AreaId);
                            <div style="width:15em; display:inline-block" @InventoryTdClass(activity, Model.BucketSkuList[i].InventoryByArea[j].InventoryPieces)>
                                <div class="well well-sm">
                                    <div>
                                        <span class="pull-right">@Html.DisplayFor(m => m.BucketSkuList[i].InventoryByArea[j].InventoryPieces)</span>
                                        <span>@Model.AllAreas[j].BuildingId-@Model.AllAreas[j].ShortName</span>
                                    </div>
                                    @if (!string.IsNullOrWhiteSpace(Model.BucketSkuList[i].InventoryByArea[j].BestLocationId))
                                    {
                                        <div class="label label-primary">
                                            @Html.DisplayFor(m => m.BucketSkuList[i].InventoryByArea[j].PiecesAtBestLocation) pcs
                                            @Html.DisplayFor(m => m.BucketSkuList[i].InventoryByArea[j].BestLocationId)
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <div style="width:12em; display:inline-block" class="hidden-xs">
                                &nbsp;
                            </div>
                        }
                    }
                    @if (!hasInventory)
                    {
                        <div style="text-align:center">No Inventory</div>
                    }

                </div>


            </div>

        </li>
    }
</ul>



















